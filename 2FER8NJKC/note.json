{
  "paragraphs": [
    {
      "text": "%md\n\n# Web Server Log Analysis with Apache Spark\n\nThis lab will demonstrate how easy it is to perform web server log analysis with Apache Spark.\n\nServer log analysis is an ideal use case for Spark. It\u0027s a very large, common data source and contains a rich set of information. Spark allows you to store your logs in files on disk cheaply, while still providing a quick and simple way to perform data analysis on them. This homework will show you how to use Apache Spark on real-world text-based production logs and fully harness the power of that data. Log data comes from many sources, such as web, file, and compute servers, application logs, user-generated content, and can be used for monitoring servers, improving business and customer intelligence, building recommendation systems, fraud detection, and much more.\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 18:53:07.019",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "fontSize": 9.0,
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eWeb Server Log Analysis with Apache Spark\u003c/h1\u003e\n\u003cp\u003eThis lab will demonstrate how easy it is to perform web server log analysis with Apache Spark.\u003c/p\u003e\n\u003cp\u003eServer log analysis is an ideal use case for Spark. It\u0026rsquo;s a very large, common data source and contains a rich set of information. Spark allows you to store your logs in files on disk cheaply, while still providing a quick and simple way to perform data analysis on them. This homework will show you how to use Apache Spark on real-world text-based production logs and fully harness the power of that data. Log data comes from many sources, such as web, file, and compute servers, application logs, user-generated content, and can be used for monitoring servers, improving business and customer intelligence, building recommendation systems, fraud detection, and much more.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113087_712108402",
      "id": "20160721-205608_398995935",
      "dateCreated": "2020-08-01 15:05:13.088",
      "dateStarted": "2020-08-01 18:53:07.905",
      "dateFinished": "2020-08-01 18:53:38.346",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n## How to complete this lab\n\nThis lab is broken up into sections with bite-sized examples for demonstrating Spark functionality for log processing.\n\nIt consists of 5 parts:\n\n* Part 1: Introduction and Imports\n* Part 2: Exploratory Data Analysis\n* Part 3: Analysis Walk-Through on the Web Server Log File\n* Part 4: Analyzing Web Server Log File\n* Part 5: Exploring 404 Response Codes",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.134",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003eHow to complete this lab\u003c/h2\u003e\n\u003cp\u003eThis lab is broken up into sections with bite-sized examples for demonstrating Spark functionality for log processing.\u003c/p\u003e\n\u003cp\u003eIt consists of 5 parts:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePart 1: Introduction and Imports\u003c/li\u003e\n\u003cli\u003ePart 2: Exploratory Data Analysis\u003c/li\u003e\n\u003cli\u003ePart 3: Analysis Walk-Through on the Web Server Log File\u003c/li\u003e\n\u003cli\u003ePart 4: Analyzing Web Server Log File\u003c/li\u003e\n\u003cli\u003ePart 5: Exploring 404 Response Codes\u003c/li\u003e\n\u003c/ul\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113130_815757864",
      "id": "20160721-205649_1921894344",
      "dateCreated": "2020-08-01 15:05:13.130",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-02 00:15:58.557",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1596320158536_-218942571",
      "id": "20200802-001558_1280272482",
      "dateCreated": "2020-08-02 00:15:58.536",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n## Part 1: Library Imports\n\nWe can import standard Python libraries (modules) the usual way. An import statement will import the specified module. In this lab, we will provide any imports that are necessary.\nLet\u0027s import some of the libraries we\u0027ll need:\n\n* datetime: Date and time functions\n* re: The regular expression library",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.141",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003ePart 1: Library Imports\u003c/h2\u003e\n\u003cp\u003eWe can import standard Python libraries (modules) the usual way. An import statement will import the specified module. In this lab, we will provide any imports that are necessary.\n\u003cbr  /\u003eLet\u0027s import some of the libraries we\u0027ll need:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edatetime: Date and time functions\u003c/li\u003e\n\u003cli\u003ere: The regular expression library\u003c/li\u003e\n\u003c/ul\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113136_-1785841396",
      "id": "20160721-210321_1736487949",
      "dateCreated": "2020-08-01 15:05:13.136",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\n\nwget -O apache.access.log.PROJECT.gz https://www.dropbox.com/s/n13homy2ssyd1n2/apache.access.log.PROJECT.gz?dl\u003d0\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.148",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sh",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113143_2130806664",
      "id": "20160725-204705_200637156",
      "dateCreated": "2020-08-01 15:05:13.143",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\n\nrm -f apache.access.log.PROJECT\ngunzip apache.access.log.PROJECT.gz",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.159",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sh",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113150_-1581086479",
      "id": "20160725-204907_172285624",
      "dateCreated": "2020-08-01 15:05:13.150",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\n\nhdfs dfs -rm -f -skipTrash /tmp/apache.access.log.PROJECT\nhdfs dfs -put apache.access.log.PROJECT /tmp\nhdfs dfs -ls /tmp/apache.access.log.PROJECT\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.167",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Deleted /tmp/apache.access.log.PROJECT\n-rw-r--r--   3 zeppelin hdfs  111503503 2016-07-25 22:31 /tmp/apache.access.log.PROJECT\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113161_-1164088728",
      "id": "20160721-202134_1390334492",
      "dateCreated": "2020-08-01 15:05:13.161",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "sc",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:54:21.870",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res1: org.apache.spark.SparkContext \u003d org.apache.spark.SparkContext@6befa74\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287482156_1161582982",
      "id": "20200801-151122_1142183400",
      "dateCreated": "2020-08-01 15:11:22.156",
      "dateStarted": "2020-08-01 15:54:26.853",
      "dateFinished": "2020-08-01 15:55:50.178",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "sqlContext",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 16:32:51.609",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "fontSize": 9.0,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res1: org.apache.spark.sql.SQLContext \u003d org.apache.spark.sql.SQLContext@5af333c7\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113169_-2087919907",
      "id": "20160724-010528_127523330",
      "dateCreated": "2020-08-01 15:05:13.169",
      "dateStarted": "2020-08-01 16:32:54.998",
      "dateFinished": "2020-08-01 16:34:28.328",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n5*4",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 16:35:38.333",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true,
        "fontSize": 9.0,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "python process not runningorg.apache.zeppelin.interpreter.util.InterpreterOutputStream@405eeff2"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113177_928747516",
      "id": "20160718-191223_2111119137",
      "dateCreated": "2020-08-01 15:05:13.178",
      "dateStarted": "2020-08-01 16:49:59.953",
      "dateFinished": "2020-08-01 16:49:59.990",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n# Quick test of regexp library\nimport re\n\n# Quick test of the regular expression library\nm \u003d re.search(\u0027(?\u003c\u003dabc)def\u0027, \u0027abcdef\u0027)\n\nprint m.group(0)",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.205",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "def\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113185_212000495",
      "id": "20160718-190935_95514384",
      "dateCreated": "2020-08-01 15:05:13.185",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n## Part 2: Exploratory Data Analysis\n\nLet\u0027s begin looking at our data. For this lab, we will use a data set from NASA Kennedy Space Center web server in Florida. The full data set is freely available at \u003chttp://ita.ee.lbl.gov/html/contrib/NASA-HTTP.html\u003e, and it contains all HTTP requests for two months. We are using a subset that only contains several days\u0027 worth of requests. The log file has already been downloaded for you.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.212",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003ePart 2: Exploratory Data Analysis\u003c/h2\u003e\n\u003cp\u003eLet\u0027s begin looking at our data. For this lab, we will use a data set from NASA Kennedy Space Center web server in Florida. The full data set is freely available at \u003ca href\u003d\"http://ita.ee.lbl.gov/html/contrib/NASA-HTTP.html\"\u003ehttp://ita.ee.lbl.gov/html/contrib/NASA-HTTP.html\u003c/a\u003e, and it contains all HTTP requests for two months. We are using a subset that only contains several days\u0027 worth of requests. The log file has already been downloaded for you.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113207_1377614696",
      "id": "20160721-210530_1635089066",
      "dateCreated": "2020-08-01 15:05:13.207",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (2a) Loading the log file\n\nNow that we have the path to the file, let\u0027s load it into a DataFrame. We\u0027ll do this in steps. First, we\u0027ll use sqlContext.read.text() to read the text file. This will produce a DataFrame with a single string column called value.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.219",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(2a) Loading the log file\u003c/h3\u003e\n\u003cp\u003eNow that we have the path to the file, let\u0027s load it into a DataFrame. We\u0027ll do this in steps. First, we\u0027ll use sqlContext.read.text() to read the text file. This will produce a DataFrame with a single string column called value.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113215_1678203742",
      "id": "20160721-210741_1305148056",
      "dateCreated": "2020-08-01 15:05:13.215",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "spark.version",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 19:22:02.169",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res4: String \u003d 2.4.4\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596300772593_-1307748273",
      "id": "20200801-185252_1361544220",
      "dateCreated": "2020-08-01 18:52:52.593",
      "dateStarted": "2020-08-01 19:22:02.635",
      "dateFinished": "2020-08-01 19:22:03.581",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.sql.DataFrameReader\n\nimport org.apache.spark.storage.StorageLevel\n\nval df_reader: DataFrameReader \u003d spark.read\n\nval base_df \u003d df_reader.textFile(\"D:\\\\AnacondaProjects\\\\Datasets\\\\apache.access.log.PROJECT\\\\apache.access.log.PROJECT\").persist(StorageLevel.MEMORY_AND_DISK)\n\nbase_df.show(truncate\u003dfalse)",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 19:28:08.411",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------------------------------------------------------------------------------------------------------------------------------+\n|value                                                                                                                          |\n+-------------------------------------------------------------------------------------------------------------------------------+\n|in24.inetnebr.com - - [01/Aug/1995:00:00:01 -0400] \"GET /shuttle/missions/sts-68/news/sts-68-mcc-05.txt HTTP/1.0\" 200 1839     |\n|uplherc.upl.com - - [01/Aug/1995:00:00:07 -0400] \"GET / HTTP/1.0\" 304 0                                                        |\n|uplherc.upl.com - - [01/Aug/1995:00:00:08 -0400] \"GET /images/ksclogo-medium.gif HTTP/1.0\" 304 0                               |\n|uplherc.upl.com - - [01/Aug/1995:00:00:08 -0400] \"GET /images/MOSAIC-logosmall.gif HTTP/1.0\" 304 0                             |\n|uplherc.upl.com - - [01/Aug/1995:00:00:08 -0400] \"GET /images/USA-logosmall.gif HTTP/1.0\" 304 0                                |\n|ix-esc-ca2-07.ix.netcom.com - - [01/Aug/1995:00:00:09 -0400] \"GET /images/launch-logo.gif HTTP/1.0\" 200 1713                   |\n|uplherc.upl.com - - [01/Aug/1995:00:00:10 -0400] \"GET /images/WORLD-logosmall.gif HTTP/1.0\" 304 0                              |\n|slppp6.intermind.net - - [01/Aug/1995:00:00:10 -0400] \"GET /history/skylab/skylab.html HTTP/1.0\" 200 1687                      |\n|piweba4y.prodigy.com - - [01/Aug/1995:00:00:10 -0400] \"GET /images/launchmedium.gif HTTP/1.0\" 200 11853                        |\n|slppp6.intermind.net - - [01/Aug/1995:00:00:11 -0400] \"GET /history/skylab/skylab-small.gif HTTP/1.0\" 200 9202                 |\n|slppp6.intermind.net - - [01/Aug/1995:00:00:12 -0400] \"GET /images/ksclogosmall.gif HTTP/1.0\" 200 3635                         |\n|ix-esc-ca2-07.ix.netcom.com - - [01/Aug/1995:00:00:12 -0400] \"GET /history/apollo/images/apollo-logo1.gif HTTP/1.0\" 200 1173   |\n|slppp6.intermind.net - - [01/Aug/1995:00:00:13 -0400] \"GET /history/apollo/images/apollo-logo.gif HTTP/1.0\" 200 3047           |\n|uplherc.upl.com - - [01/Aug/1995:00:00:14 -0400] \"GET /images/NASA-logosmall.gif HTTP/1.0\" 304 0                               |\n|133.43.96.45 - - [01/Aug/1995:00:00:16 -0400] \"GET /shuttle/missions/sts-69/mission-sts-69.html HTTP/1.0\" 200 10566            |\n|kgtyk4.kj.yamagata-u.ac.jp - - [01/Aug/1995:00:00:17 -0400] \"GET / HTTP/1.0\" 200 7280                                          |\n|kgtyk4.kj.yamagata-u.ac.jp - - [01/Aug/1995:00:00:18 -0400] \"GET /images/ksclogo-medium.gif HTTP/1.0\" 200 5866                 |\n|d0ucr6.fnal.gov - - [01/Aug/1995:00:00:19 -0400] \"GET /history/apollo/apollo-16/apollo-16.html HTTP/1.0\" 200 2743              |\n|ix-esc-ca2-07.ix.netcom.com - - [01/Aug/1995:00:00:19 -0400] \"GET /shuttle/resources/orbiters/discovery.html HTTP/1.0\" 200 6849|\n|d0ucr6.fnal.gov - - [01/Aug/1995:00:00:20 -0400] \"GET /history/apollo/apollo-16/apollo-16-patch-small.gif HTTP/1.0\" 200 14897  |\n+-------------------------------------------------------------------------------------------------------------------------------+\nonly showing top 20 rows\n\r\nimport org.apache.spark.sql.DataFrameReader\r\nimport org.apache.spark.storage.StorageLevel\r\ndf_reader: org.apache.spark.sql.DataFrameReader \u003d org.apache.spark.sql.DataFrameReader@3897796b\r\nbase_df: org.apache.spark.sql.Dataset[String] \u003d [value: string]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596300767996_697452412",
      "id": "20200801-185247_680909428",
      "dateCreated": "2020-08-01 18:52:47.996",
      "dateStarted": "2020-08-01 19:28:08.915",
      "dateFinished": "2020-08-01 19:28:12.210",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val a \u003d base_df.head\na(121)",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 22:55:04.866",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "a: String \u003d in24.inetnebr.com - - [01/Aug/1995:00:00:01 -0400] \"GET /shuttle/missions/sts-68/news/sts-68-mcc-05.txt HTTP/1.0\" 200 1839\r\nres19: Char \u003d 9\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596315222806_277454182",
      "id": "20200801-225342_1309916720",
      "dateCreated": "2020-08-01 22:53:42.806",
      "dateStarted": "2020-08-01 22:55:05.204",
      "dateFinished": "2020-08-01 22:55:06.690",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val stringa \u003d \"\"\"133.43.96.45 - - [01/Aug/1995:00:00:16 -0400] \"GET /shuttle/missions/sts-69/mission-sts-69.html HTTP/1.0\" 200 10566\"\"\"\n\nval pattern1 \u003d \"\"\"([a-zA-Z0-9\\.]+)\"\"\".r\nval pattern2 \u003d \"\"\"\\[([a-zA-Z0-9\\.\\/\\:\\s\\-]+)\\]\"\"\".r\nval pattern3 \u003d \"\"\"\\\"([a-zA-Z0-9\\.\\/\\:\\s\\-]+)\\\"\\s\"\"\".r\nval pattern4 \u003d \"\"\"([0-9]+)\"\"\".r\nval pattern5 \u003d \"\"\"([0-9]+)$\"\"\".r\n\nval host \u003d pattern1.findFirstIn(stringa).getOrElse(\"-\")\nval date_ \u003d pattern2.findFirstIn(stringa).getOrElse(\"-\")\nval pattern22 \u003d \"\"\"([a-zA-Z0-9\\.\\/\\:\\s\\-]+)\"\"\".r\nval date \u003d pattern22.findFirstIn(date_).getOrElse(\"-\")\n\nval req_ \u003d pattern3.findFirstIn(stringa).getOrElse(\"-\")\nval pattern33 \u003d \"\"\"([a-zA-Z0-9\\.\\/\\:\\s\\-]+)\"\"\".r\nval req \u003d pattern33.findFirstIn(req_).getOrElse(\"-\")\n\nval code \u003d pattern4.findFirstIn(stringa).getOrElse(\"-\")\nval bytes \u003d pattern5.findFirstIn(stringa).getOrElse(\"-\")",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 23:34:29.155",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 401.0,
              "optionOpen": false
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "stringa: String \u003d 133.43.96.45 - - [01/Aug/1995:00:00:16 -0400] \"GET /shuttle/missions/sts-69/mission-sts-69.html HTTP/1.0\" 200 10566\r\npattern1: scala.util.matching.Regex \u003d ([a-zA-Z0-9\\.]+)\r\npattern2: scala.util.matching.Regex \u003d \\[([a-zA-Z0-9\\.\\/\\:\\s\\-]+)\\]\r\npattern3: scala.util.matching.Regex \u003d \\\"([a-zA-Z0-9\\.\\/\\:\\s\\-]+)\\\"\\s\r\npattern4: scala.util.matching.Regex \u003d ([0-9]+)\r\npattern5: scala.util.matching.Regex \u003d ([0-9]+)$\r\nhost: String \u003d 133.43.96.45\r\ndate_: String \u003d [01/Aug/1995:00:00:16 -0400]\r\npattern22: scala.util.matching.Regex \u003d ([a-zA-Z0-9\\.\\/\\:\\s\\-]+)\r\ndate: String \u003d 01/Aug/1995:00:00:16 -0400\r\nreq_: String \u003d \"\"GET /shuttle/missions/sts-69/mission-sts-69.html HTTP/1.0\" \"\r\npattern33: scala.util.matching.Regex \u003d ([a-zA-Z0-9\\.\\/\\:\\s\\-]+)\r\nreq: String \u003d GET /shuttle/missions/sts-69/m..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596313786790_-1692124023",
      "id": "20200801-222946_848694406",
      "dateCreated": "2020-08-01 22:29:46.790",
      "dateStarted": "2020-08-01 23:33:12.870",
      "dateFinished": "2020-08-01 23:33:14.025",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "case class protocolRow(host: String, date: String, req: String, code: String, bytes: String)\n\ndef funcRowProcess(strinfa: String): Seq[String] \u003d {\n    \n    val pattern1 \u003d \"\"\"([a-zA-Z0-9\\.]+)\"\"\".r\n    val pattern2 \u003d \"\"\"\\[([a-zA-Z0-9\\.\\/\\:\\s\\-]+)\\]\"\"\".r\n    val pattern3 \u003d \"\"\"\\\"([a-zA-Z0-9\\.\\/\\:\\s\\-]+)\\\"\\s\"\"\".r\n    val pattern4 \u003d \"\"\"([0-9]+)\"\"\".r\n    val pattern5 \u003d \"\"\"([0-9]+)$\"\"\".r\n    \n    val host \u003d pattern1.findFirstIn(stringa).getOrElse(\"-\")\n    val date_ \u003d pattern2.findFirstIn(stringa).getOrElse(\"-\")\n    val pattern22 \u003d \"\"\"([a-zA-Z0-9\\.\\/\\:\\s\\-]+)\"\"\".r\n    val date \u003d pattern22.findFirstIn(date_).getOrElse(\"-\")\n    \n    val req_ \u003d pattern3.findFirstIn(stringa).getOrElse(\"-\")\n    val pattern33 \u003d \"\"\"([a-zA-Z0-9\\.\\/\\:\\s\\-]+)\"\"\".r\n    val req \u003d pattern33.findFirstIn(req_).getOrElse(\"-\")\n    \n    val code \u003d pattern4.findFirstIn(stringa).getOrElse(\"-\")\n    val bytes \u003d pattern5.findFirstIn(stringa).getOrElse(\"-\")   \n\n    Seq(host, date, req, code, bytes)\n}\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-02 00:10:55.075",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "defined class protocolRow\r\nfuncRowProcess: (strinfa: String)Seq[String]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596317162926_-441810900",
      "id": "20200801-232602_1294683144",
      "dateCreated": "2020-08-01 23:26:02.926",
      "dateStarted": "2020-08-02 00:10:55.520",
      "dateFinished": "2020-08-02 00:10:56.918",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "funcRowProcess(base_df.head)",
      "user": "anonymous",
      "dateUpdated": "2020-08-02 00:11:07.120",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res44: Seq[String] \u003d List(133.43.96.45, 01/Aug/1995:00:00:16 -0400, GET /shuttle/missions/sts-69/mission-sts-69.html HTTP/1.0, 133, 10566)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596316998785_1899515105",
      "id": "20200801-232318_1929026913",
      "dateCreated": "2020-08-01 23:23:18.785",
      "dateStarted": "2020-08-02 00:11:07.543",
      "dateFinished": "2020-08-02 00:11:08.897",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "base_df.map(value \u003d\u003e funcRowProcess(value)).show",
      "user": "anonymous",
      "dateUpdated": "2020-08-02 00:11:20.276",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "org.apache.spark.SparkException: Task not serializable\r\n  at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:403)\r\n  at org.apache.spark.util.ClosureCleaner$.org$apache$spark$util$ClosureCleaner$$clean(ClosureCleaner.scala:393)\r\n  at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:162)\r\n  at org.apache.spark.SparkContext.clean(SparkContext.scala:2326)\r\n  at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsWithIndex$1.apply(RDD.scala:850)\r\n  at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsWithIndex$1.apply(RDD.scala:849)\r\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\r\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\r\n  at org.apache.spark.rdd.RDD.withScope(RDD.scala:363)\r\n  at org.apache.spark.rdd.RDD.mapPartitionsWithIndex(RDD.scala:849)\r\n  at org.apache.spark.sql.execution.WholeStageCodegenExec.doExecute(WholeStageCodegenExec.scala:630)\r\n  at org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$1.apply(SparkPlan.scala:131)\r\n  at org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$1.apply(SparkPlan.scala:127)\r\n  at org.apache.spark.sql.execution.SparkPlan$$anonfun$executeQuery$1.apply(SparkPlan.scala:155)\r\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\r\n  at org.apache.spark.sql.execution.SparkPlan.executeQuery(SparkPlan.scala:152)\r\n  at org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:127)\r\n  at org.apache.spark.sql.execution.SparkPlan.getByteArrayRdd(SparkPlan.scala:247)\r\n  at org.apache.spark.sql.execution.SparkPlan.executeTake(SparkPlan.scala:339)\r\n  at org.apache.spark.sql.execution.CollectLimitExec.executeCollect(limit.scala:38)\r\n  at org.apache.spark.sql.Dataset.org$apache$spark$sql$Dataset$$collectFromPlan(Dataset.scala:3389)\r\n  at org.apache.spark.sql.Dataset$$anonfun$head$1.apply(Dataset.scala:2550)\r\n  at org.apache.spark.sql.Dataset$$anonfun$head$1.apply(Dataset.scala:2550)\r\n  at org.apache.spark.sql.Dataset$$anonfun$52.apply(Dataset.scala:3370)\r\n  at org.apache.spark.sql.execution.SQLExecution$$anonfun$withNewExecutionId$1.apply(SQLExecution.scala:78)\r\n  at org.apache.spark.sql.execution.SQLExecution$.withSQLConfPropagated(SQLExecution.scala:125)\r\n  at org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:73)\r\n  at org.apache.spark.sql.Dataset.withAction(Dataset.scala:3369)\r\n  at org.apache.spark.sql.Dataset.head(Dataset.scala:2550)\r\n  at org.apache.spark.sql.Dataset.take(Dataset.scala:2764)\r\n  at org.apache.spark.sql.Dataset.getRows(Dataset.scala:254)\r\n  at org.apache.spark.sql.Dataset.showString(Dataset.scala:291)\r\n  at org.apache.spark.sql.Dataset.show(Dataset.scala:751)\r\n  at org.apache.spark.sql.Dataset.show(Dataset.scala:710)\r\n  at org.apache.spark.sql.Dataset.show(Dataset.scala:719)\r\n  ... 52 elided\r\nCaused by: java.io.NotSerializableException: org.apache.spark.sql.DataFrameReader\r\nSerialization stack:\r\n\t- object not serializable (class: org.apache.spark.sql.DataFrameReader, value: org.apache.spark.sql.DataFrameReader@3897796b)\r\n\t- field (class: $iw, name: df_reader, type: class org.apache.spark.sql.DataFrameReader)\r\n\t- object (class $iw, $iw@444369f1)\r\n\t- field (class: $iw, name: $iw, type: class $iw)\r\n\t- object (class $iw, $iw@7be8b97)\r\n\t- field (class: $iw, name: $iw, type: class $iw)\r\n\t- object (class $iw, $iw@22b719c6)\r\n\t- field (class: $iw, name: $iw, type: class $iw)\r\n\t- object (class $iw, $iw@75da21a1)\r\n\t- field (class: $iw, name: $iw, type: class $iw)\r\n\t- object (class $iw, $iw@5c895ba7)\r\n\t- field (class: $iw, name: $iw, type: class $iw)\r\n\t- object (class $iw, $iw@c9da1b1)\r\n\t- field (class: $iw, name: $iw, type: class $iw)\r\n\t- object (class $iw, $iw@2840b2ca)\r\n\t- field (class: $iw, name: $iw, type: class $iw)\r\n\t- object (class $iw, $iw@68d5bd9b)\r\n\t- field (class: $iw, name: $iw, type: class $iw)\r\n\t- object (class $iw, $iw@6a2daed7)\r\n\t- field (class: $iw, name: $iw, type: class $iw)\r\n\t- object (class $iw, $iw@703fd258)\r\n\t- field (class: $iw, name: $iw, type: class $iw)\r\n\t- object (class $iw, $iw@27c697b5)\r\n\t- field (class: $iw, name: $iw, type: class $iw)\r\n\t- object (class $iw, $iw@faaf6cf)\r\n\t- field (class: $line138127296969.$read, name: $iw, type: class $iw)\r\n\t- object (class $line138127296969.$read, $line138127296969.$read@5d1912ff)\r\n\t- field (class: $iw, name: $line138127296969$read, type: class $line138127296969.$read)\r\n\t- object (class $iw, $iw@6916c332)\r\n\t- field (class: $iw, name: $outer, type: class $iw)\r\n\t- object (class $iw, $iw@77f7e3b5)\r\n\t- field (class: $anonfun$1, name: $outer, type: class $iw)\r\n\t- object (class $anonfun$1, \u003cfunction1\u003e)\r\n\t- element of array (index: 0)\r\n\t- array (class [Ljava.lang.Object;, size 1)\r\n\t- field (class: org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$13, name: references$1, type: class [Ljava.lang.Object;)\r\n\t- object (class org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$13, \u003cfunction2\u003e)\r\n  at org.apache.spark.serializer.SerializationDebugger$.improveException(SerializationDebugger.scala:40)\r\n  at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:46)\r\n  at org.apache.spark.serializer.JavaSerializerInstance.serialize(JavaSerializer.scala:100)\r\n  at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:400)\r\n  ... 86 more\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596318663912_1392927483",
      "id": "20200801-235103_900202154",
      "dateCreated": "2020-08-01 23:51:03.912",
      "dateStarted": "2020-08-02 00:11:20.620",
      "dateFinished": "2020-08-02 00:11:24.219",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "base_df.columns",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 23:54:01.007",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res33: Array[String] \u003d Array(value)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596318825251_-1262595260",
      "id": "20200801-235345_1552858647",
      "dateCreated": "2020-08-01 23:53:45.251",
      "dateStarted": "2020-08-01 23:54:01.317",
      "dateFinished": "2020-08-01 23:54:02.040",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\n# Specify path to downloaded log file\nimport sys\nimport os\n\nlog_file_path \u003d \u0027hdfs:///\u0027 + os.path.join(\u0027tmp\u0027, \u0027apache.access.log.PROJECT\u0027)\n\nprint log_file_path\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.226",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "hdfs:///tmp/apache.access.log.PROJECT\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113221_-435046597",
      "id": "20160718-191015_2140118453",
      "dateCreated": "2020-08-01 15:05:13.221",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nbase_df \u003d  sqlContext.read.text(log_file_path)\n# Let\u0027s look at the schema\nbase_df.printSchema()\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.234",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- value: string (nullable \u003d true)\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113228_-857929410",
      "id": "20160718-195018_1400250065",
      "dateCreated": "2020-08-01 15:05:13.229",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nLet\u0027s take a look at some of the data",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.243",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eLet\u0027s take a look at some of the data\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113237_1863955020",
      "id": "20160721-210826_262995281",
      "dateCreated": "2020-08-01 15:05:13.237",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nbase_df.show(truncate\u003dFalse)",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.250",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------------------------------------------------------------------------------------------------------------------------------+\n|value                                                                                                                          |\n+-------------------------------------------------------------------------------------------------------------------------------+\n|in24.inetnebr.com - - [01/Aug/1995:00:00:01 -0400] \"GET /shuttle/missions/sts-68/news/sts-68-mcc-05.txt HTTP/1.0\" 200 1839     |\n|uplherc.upl.com - - [01/Aug/1995:00:00:07 -0400] \"GET / HTTP/1.0\" 304 0                                                        |\n|uplherc.upl.com - - [01/Aug/1995:00:00:08 -0400] \"GET /images/ksclogo-medium.gif HTTP/1.0\" 304 0                               |\n|uplherc.upl.com - - [01/Aug/1995:00:00:08 -0400] \"GET /images/MOSAIC-logosmall.gif HTTP/1.0\" 304 0                             |\n|uplherc.upl.com - - [01/Aug/1995:00:00:08 -0400] \"GET /images/USA-logosmall.gif HTTP/1.0\" 304 0                                |\n|ix-esc-ca2-07.ix.netcom.com - - [01/Aug/1995:00:00:09 -0400] \"GET /images/launch-logo.gif HTTP/1.0\" 200 1713                   |\n|uplherc.upl.com - - [01/Aug/1995:00:00:10 -0400] \"GET /images/WORLD-logosmall.gif HTTP/1.0\" 304 0                              |\n|slppp6.intermind.net - - [01/Aug/1995:00:00:10 -0400] \"GET /history/skylab/skylab.html HTTP/1.0\" 200 1687                      |\n|piweba4y.prodigy.com - - [01/Aug/1995:00:00:10 -0400] \"GET /images/launchmedium.gif HTTP/1.0\" 200 11853                        |\n|slppp6.intermind.net - - [01/Aug/1995:00:00:11 -0400] \"GET /history/skylab/skylab-small.gif HTTP/1.0\" 200 9202                 |\n|slppp6.intermind.net - - [01/Aug/1995:00:00:12 -0400] \"GET /images/ksclogosmall.gif HTTP/1.0\" 200 3635                         |\n|ix-esc-ca2-07.ix.netcom.com - - [01/Aug/1995:00:00:12 -0400] \"GET /history/apollo/images/apollo-logo1.gif HTTP/1.0\" 200 1173   |\n|slppp6.intermind.net - - [01/Aug/1995:00:00:13 -0400] \"GET /history/apollo/images/apollo-logo.gif HTTP/1.0\" 200 3047           |\n|uplherc.upl.com - - [01/Aug/1995:00:00:14 -0400] \"GET /images/NASA-logosmall.gif HTTP/1.0\" 304 0                               |\n|133.43.96.45 - - [01/Aug/1995:00:00:16 -0400] \"GET /shuttle/missions/sts-69/mission-sts-69.html HTTP/1.0\" 200 10566            |\n|kgtyk4.kj.yamagata-u.ac.jp - - [01/Aug/1995:00:00:17 -0400] \"GET / HTTP/1.0\" 200 7280                                          |\n|kgtyk4.kj.yamagata-u.ac.jp - - [01/Aug/1995:00:00:18 -0400] \"GET /images/ksclogo-medium.gif HTTP/1.0\" 200 5866                 |\n|d0ucr6.fnal.gov - - [01/Aug/1995:00:00:19 -0400] \"GET /history/apollo/apollo-16/apollo-16.html HTTP/1.0\" 200 2743              |\n|ix-esc-ca2-07.ix.netcom.com - - [01/Aug/1995:00:00:19 -0400] \"GET /shuttle/resources/orbiters/discovery.html HTTP/1.0\" 200 6849|\n|d0ucr6.fnal.gov - - [01/Aug/1995:00:00:20 -0400] \"GET /history/apollo/apollo-16/apollo-16-patch-small.gif HTTP/1.0\" 200 14897  |\n+-------------------------------------------------------------------------------------------------------------------------------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113245_-1102341417",
      "id": "20160718-195215_169877856",
      "dateCreated": "2020-08-01 15:05:13.245",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (2b) Parsing the log file",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.257",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(2b) Parsing the log file\u003c/h3\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113252_848076531",
      "id": "20160721-212802_988981671",
      "dateCreated": "2020-08-01 15:05:13.252",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nIf you\u0027re familiar with web servers at all, you\u0027ll recognize that this is in\n[Common Log Format](https://www.w3.org/Daemon/User/Config/Logging.html#common-logfile-format). \n\nThe fields are:\n\nremotehost, rfc931, authuser, [date], \"request\", status, bytes\n\n\n    | field       | meaning                                                                |\n    |-------------|------------------------------------------------------------------------|\n    | remotehost  | Remote hostname (or IP number if DNS hostname is not available).       |\n    | rfc931      | The remote logname of the user. We don\u0027t really care about this field. |\n    | authuser    | The username of the remote user, as authenticated by the HTTP server.  |\n    | [date]      | The date and time of the request.                                      |\n    | \"request\"   | The request, exactly as it came from the browser or client.            |\n    | status      | The HTTP status code the server sent back to the client.               |\n    | bytes       | The number of bytes (`Content-Length`) transferred to the client.      |\n\n\n\nNext, we have to parse it into individual columns. We\u0027ll use the special built-in [regexp\\_extract()](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.functions.regexp_extract)\nfunction to do the parsing. This function matches a column against a regular expression with one or more [capture groups](http://regexone.com/lesson/capturing_groups) and allows you to extract one of the matched groups. We\u0027ll use one regular expression for each field we wish to extract.\n\nIf you can\u0027t read these regular expressions, don\u0027t worry. Trust us: They work. If you find regular expressions confusing (and they certainly _can_ be), and you want to learn more about them, start with the\n[RegexOne web site](http://regexone.com/). You might also find [_Regular Expressions Cookbook_](http://shop.oreilly.com/product/0636920023630.do), by Jan Goyvaerts and Steven Levithan, to be helpful.\n\n_Some people, when confronted with a problem, think \"I know, I\u0027ll use regular expressions.\" Now they have two problems._ (attributed to Jamie Zawinski)",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.264",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eIf you\u0027re familiar with web servers at all, you\u0027ll recognize that this is in\n\u003cbr  /\u003e\u003ca href\u003d\"https://www.w3.org/Daemon/User/Config/Logging.html#common-logfile-format\"\u003eCommon Log Format\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe fields are:\u003c/p\u003e\n\u003cp\u003eremotehost, rfc931, authuser, [date], \u0026ldquo;request\u0026rdquo;, status, bytes\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e| field       | meaning                                                                |\n|-------------|------------------------------------------------------------------------|\n| remotehost  | Remote hostname (or IP number if DNS hostname is not available).       |\n| rfc931      | The remote logname of the user. We don\u0027t really care about this field. |\n| authuser    | The username of the remote user, as authenticated by the HTTP server.  |\n| [date]      | The date and time of the request.                                      |\n| \"request\"   | The request, exactly as it came from the browser or client.            |\n| status      | The HTTP status code the server sent back to the client.               |\n| bytes       | The number of bytes (`Content-Length`) transferred to the client.      |\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, we have to parse it into individual columns. We\u0027ll use the special built-in \u003ca href\u003d\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.functions.regexp_extract\"\u003eregexp_extract()\u003c/a\u003e\n\u003cbr  /\u003efunction to do the parsing. This function matches a column against a regular expression with one or more \u003ca href\u003d\"http://regexone.com/lesson/capturing_groups\"\u003ecapture groups\u003c/a\u003e and allows you to extract one of the matched groups. We\u0027ll use one regular expression for each field we wish to extract.\u003c/p\u003e\n\u003cp\u003eIf you can\u0027t read these regular expressions, don\u0027t worry. Trust us: They work. If you find regular expressions confusing (and they certainly \u003cem\u003ecan\u003c/em\u003e be), and you want to learn more about them, start with the\n\u003cbr  /\u003e\u003ca href\u003d\"http://regexone.com/\"\u003eRegexOne web site\u003c/a\u003e. You might also find \u003ca href\u003d\"http://shop.oreilly.com/product/0636920023630.do\"\u003e\u003cem\u003eRegular Expressions Cookbook\u003c/em\u003e\u003c/a\u003e, by Jan Goyvaerts and Steven Levithan, to be helpful.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSome people, when confronted with a problem, think \u0026ldquo;I know, I\u0027ll use regular expressions.\u0026rdquo; Now they have two problems.\u003c/em\u003e (attributed to Jamie Zawinski)\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113259_-603715273",
      "id": "20160721-210934_867340648",
      "dateCreated": "2020-08-01 15:05:13.259",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-02 00:12:51.515",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1596306557283_1863473906",
      "id": "20200801-202917_846752761",
      "dateCreated": "2020-08-01 20:29:17.283",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nfrom pyspark.sql.functions import split, regexp_extract\nsplit_df \u003d base_df.select(regexp_extract(\u0027value\u0027, r\u0027^([^\\s]+\\s)\u0027, 1).alias(\u0027host\u0027),\n                          regexp_extract(\u0027value\u0027, r\u0027^.*\\[(\\d\\d/\\w{3}/\\d{4}:\\d{2}:\\d{2}:\\d{2} -\\d{4})]\u0027, 1).alias(\u0027timestamp\u0027),\n                          regexp_extract(\u0027value\u0027, r\u0027^.*\"\\w+\\s+([^\\s]+)\\s+HTTP.*\"\u0027, 1).alias(\u0027path\u0027),\n                          regexp_extract(\u0027value\u0027, r\u0027^.*\"\\s+([^\\s]+)\u0027, 1).cast(\u0027integer\u0027).alias(\u0027status\u0027),\n                          regexp_extract(\u0027value\u0027, r\u0027^.*\\s+(\\d+)$\u0027, 1).cast(\u0027integer\u0027).alias(\u0027content_size\u0027))\nsplit_df.show(truncate\u003dFalse)\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.271",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----------------------------+--------------------------+---------------------------------------------------+------+------------+\n|host                        |timestamp                 |path                                               |status|content_size|\n+----------------------------+--------------------------+---------------------------------------------------+------+------------+\n|in24.inetnebr.com           |01/Aug/1995:00:00:01 -0400|/shuttle/missions/sts-68/news/sts-68-mcc-05.txt    |200   |1839        |\n|uplherc.upl.com             |01/Aug/1995:00:00:07 -0400|/                                                  |304   |0           |\n|uplherc.upl.com             |01/Aug/1995:00:00:08 -0400|/images/ksclogo-medium.gif                         |304   |0           |\n|uplherc.upl.com             |01/Aug/1995:00:00:08 -0400|/images/MOSAIC-logosmall.gif                       |304   |0           |\n|uplherc.upl.com             |01/Aug/1995:00:00:08 -0400|/images/USA-logosmall.gif                          |304   |0           |\n|ix-esc-ca2-07.ix.netcom.com |01/Aug/1995:00:00:09 -0400|/images/launch-logo.gif                            |200   |1713        |\n|uplherc.upl.com             |01/Aug/1995:00:00:10 -0400|/images/WORLD-logosmall.gif                        |304   |0           |\n|slppp6.intermind.net        |01/Aug/1995:00:00:10 -0400|/history/skylab/skylab.html                        |200   |1687        |\n|piweba4y.prodigy.com        |01/Aug/1995:00:00:10 -0400|/images/launchmedium.gif                           |200   |11853       |\n|slppp6.intermind.net        |01/Aug/1995:00:00:11 -0400|/history/skylab/skylab-small.gif                   |200   |9202        |\n|slppp6.intermind.net        |01/Aug/1995:00:00:12 -0400|/images/ksclogosmall.gif                           |200   |3635        |\n|ix-esc-ca2-07.ix.netcom.com |01/Aug/1995:00:00:12 -0400|/history/apollo/images/apollo-logo1.gif            |200   |1173        |\n|slppp6.intermind.net        |01/Aug/1995:00:00:13 -0400|/history/apollo/images/apollo-logo.gif             |200   |3047        |\n|uplherc.upl.com             |01/Aug/1995:00:00:14 -0400|/images/NASA-logosmall.gif                         |304   |0           |\n|133.43.96.45                |01/Aug/1995:00:00:16 -0400|/shuttle/missions/sts-69/mission-sts-69.html       |200   |10566       |\n|kgtyk4.kj.yamagata-u.ac.jp  |01/Aug/1995:00:00:17 -0400|/                                                  |200   |7280        |\n|kgtyk4.kj.yamagata-u.ac.jp  |01/Aug/1995:00:00:18 -0400|/images/ksclogo-medium.gif                         |200   |5866        |\n|d0ucr6.fnal.gov             |01/Aug/1995:00:00:19 -0400|/history/apollo/apollo-16/apollo-16.html           |200   |2743        |\n|ix-esc-ca2-07.ix.netcom.com |01/Aug/1995:00:00:19 -0400|/shuttle/resources/orbiters/discovery.html         |200   |6849        |\n|d0ucr6.fnal.gov             |01/Aug/1995:00:00:20 -0400|/history/apollo/apollo-16/apollo-16-patch-small.gif|200   |14897       |\n+----------------------------+--------------------------+---------------------------------------------------+------+------------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113266_-1492901113",
      "id": "20160718-195552_1528005254",
      "dateCreated": "2020-08-01 15:05:13.266",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (2c) Data Cleaning\n\nLet\u0027s see how well our parsing logic worked. First, let\u0027s verify that there are no null rows in the original data set.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.278",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(2c) Data Cleaning\u003c/h3\u003e\n\u003cp\u003eLet\u0027s see how well our parsing logic worked. First, let\u0027s verify that there are no null rows in the original data set.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113273_635712720",
      "id": "20160721-212703_1932014155",
      "dateCreated": "2020-08-01 15:05:13.273",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nprint base_df.filter(base_df[\u0027value\u0027].isNull()).count()",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.285",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113280_-1385605771",
      "id": "20160718-200153_1865911463",
      "dateCreated": "2020-08-01 15:05:13.280",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nIf our parsing worked properly, we\u0027ll have no rows with null column values. Let\u0027s check.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.291",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eIf our parsing worked properly, we\u0027ll have no rows with null column values. Let\u0027s check.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113287_1349694567",
      "id": "20160721-212848_1283299327",
      "dateCreated": "2020-08-01 15:05:13.287",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nbad_rows_df \u003d split_df.filter(split_df[\u0027host\u0027].isNull() |\n                              split_df[\u0027timestamp\u0027].isNull() |\n                              split_df[\u0027path\u0027].isNull() |\n                              split_df[\u0027status\u0027].isNull() |\n                             split_df[\u0027content_size\u0027].isNull())\n\nprint bad_rows_df.count()",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.298",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "8756\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113293_1472174424",
      "id": "20160718-200217_1205719967",
      "dateCreated": "2020-08-01 15:05:13.293",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nNot perfect. We have some null values. We have more cleaning to do. Which columns are affected?",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.305",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eNot perfect. We have some null values. We have more cleaning to do. Which columns are affected?\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113300_-789090882",
      "id": "20160721-212919_864646186",
      "dateCreated": "2020-08-01 15:05:13.300",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nfrom pyspark.sql.functions import col, sum\n\ndef count_null(col_name):\n  return sum(col(col_name).isNull().cast(\u0027integer\u0027)).alias(col_name)\n\n# Build up a list of column expressions, one per colum",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.312",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113307_196362328",
      "id": "20160718-200250_1860290921",
      "dateCreated": "2020-08-01 15:05:13.307",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nexprs \u003d []\nfor col_name in split_df.columns:\n  exprs.append(count_null(col_name))\n  \nprint exprs\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.319",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[Column\u003c(sum(cast(isnull(host) as int)),mode\u003dComplete,isDistinct\u003dfalse) AS host#14\u003e, Column\u003c(sum(cast(isnull(timestamp) as int)),mode\u003dComplete,isDistinct\u003dfalse) AS timestamp#15\u003e, Column\u003c(sum(cast(isnull(path) as int)),mode\u003dComplete,isDistinct\u003dfalse) AS path#16\u003e, Column\u003c(sum(cast(isnull(status) as int)),mode\u003dComplete,isDistinct\u003dfalse) AS status#17\u003e, Column\u003c(sum(cast(isnull(content_size) as int)),mode\u003dComplete,isDistinct\u003dfalse) AS content_size#18\u003e]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113314_-2074885609",
      "id": "20160718-200341_292449305",
      "dateCreated": "2020-08-01 15:05:13.314",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nsplit_df.agg(*exprs).show()",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.326",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----+---------+----+------+------------+\n|host|timestamp|path|status|content_size|\n+----+---------+----+------+------------+\n|   0|        0|   0|     0|        8756|\n+----+---------+----+------+------------+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113321_-1468574008",
      "id": "20160718-200402_1743180176",
      "dateCreated": "2020-08-01 15:05:13.321",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nOkay, they\u0027re all in the `content_size` column. Let\u0027s see if we can figure out what\u0027s wrong. Our original parsing regular expression for that column was:\n\n```\nregexp_extract(\u0027value\u0027, r\u0027^.*\\s+(\\d+)$\u0027, 1).cast(\u0027integer\u0027).alias(\u0027content_size\u0027)\n```\n\nThe `\\d+` selects one or more digits at the end of the input line. Is it possible there are lines without a valid content size? Or is there something wrong with our regular expression? Let\u0027s see if there are any lines that do not end with one or more digits.\n\n**Note**: In the expression below, `~` means \"not\".",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.334",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eOkay, they\u0027re all in the \u003ccode\u003econtent_size\u003c/code\u003e column. Let\u0027s see if we can figure out what\u0027s wrong. Our original parsing regular expression for that column was:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eregexp_extract(\u0027value\u0027, r\u0027^.*\\s+(\\d+)$\u0027, 1).cast(\u0027integer\u0027).alias(\u0027content_size\u0027)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e\\d+\u003c/code\u003e selects one or more digits at the end of the input line. Is it possible there are lines without a valid content size? Or is there something wrong with our regular expression? Let\u0027s see if there are any lines that do not end with one or more digits.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: In the expression below, \u003ccode\u003e~\u003c/code\u003e means \u0026ldquo;not\u0026rdquo;.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113328_-1883814573",
      "id": "20160721-213021_496415433",
      "dateCreated": "2020-08-01 15:05:13.328",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nbad_content_size_df \u003d base_df.filter(~ base_df[\u0027value\u0027].rlike(r\u0027\\d+$\u0027))\n\nprint bad_content_size_df.count()",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.341",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "8756\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113336_-935483982",
      "id": "20160718-200415_1670913707",
      "dateCreated": "2020-08-01 15:05:13.336",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nThat\u0027s it! The count matches the number of rows in `bad_rows_df` exactly.\n\nLet\u0027s take a look at some of the bad column values. Since it\u0027s possible that the rows end in extra white space, we\u0027ll tack a marker character onto the end of each line, to make it easier to see trailing white space.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.347",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eThat\u0027s it! The count matches the number of rows in \u003ccode\u003ebad_rows_df\u003c/code\u003e exactly.\u003c/p\u003e\n\u003cp\u003eLet\u0027s take a look at some of the bad column values. Since it\u0027s possible that the rows end in extra white space, we\u0027ll tack a marker character onto the end of each line, to make it easier to see trailing white space.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113343_22897340",
      "id": "20160721-213051_622513747",
      "dateCreated": "2020-08-01 15:05:13.343",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nfrom pyspark.sql.functions import lit, concat\n\nbad_content_size_df.select(concat(bad_content_size_df[\u0027value\u0027], lit(\u0027$\u0027))).show(truncate\u003dFalse)\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.354",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----------------------------------------------------------------------------------------------------------------------------+\n|concat(value,$)                                                                                                             |\n+----------------------------------------------------------------------------------------------------------------------------+\n|gw1.att.com - - [01/Aug/1995:00:03:53 -0400] \"GET /shuttle/missions/sts-73/news HTTP/1.0\" 302 -$                            |\n|js002.cc.utsunomiya-u.ac.jp - - [01/Aug/1995:00:07:33 -0400] \"GET /shuttle/resources/orbiters/discovery.gif HTTP/1.0\" 404 -$|\n|tia1.eskimo.com - - [01/Aug/1995:00:28:41 -0400] \"GET /pub/winvn/release.txt HTTP/1.0\" 404 -$                               |\n|itws.info.eng.niigata-u.ac.jp - - [01/Aug/1995:00:38:01 -0400] \"GET /ksc.html/facts/about_ksc.html HTTP/1.0\" 403 -$         |\n|grimnet23.idirect.com - - [01/Aug/1995:00:50:12 -0400] \"GET /www/software/winvn/winvn.html HTTP/1.0\" 404 -$                 |\n|miriworld.its.unimelb.edu.au - - [01/Aug/1995:01:04:54 -0400] \"GET /history/history.htm HTTP/1.0\" 404 -$                    |\n|ras38.srv.net - - [01/Aug/1995:01:05:14 -0400] \"GET /elv/DELTA/uncons.htm HTTP/1.0\" 404 -$                                  |\n|cs1-06.leh.ptd.net - - [01/Aug/1995:01:17:38 -0400] \"GET /sts-71/launch/\" 404 -$                                            |\n|www-b2.proxy.aol.com - - [01/Aug/1995:01:22:07 -0400] \"GET /shuttle/countdown HTTP/1.0\" 302 -$                              |\n|maui56.maui.net - - [01/Aug/1995:01:31:56 -0400] \"GET /shuttle HTTP/1.0\" 302 -$                                             |\n|dialip-24.athenet.net - - [01/Aug/1995:01:33:02 -0400] \"GET /history/apollo/apollo-13.html HTTP/1.0\" 404 -$                 |\n|h96-158.ccnet.com - - [01/Aug/1995:01:35:50 -0400] \"GET /history/apollo/a-001/a-001-patch-small.gif HTTP/1.0\" 404 -$        |\n|h96-158.ccnet.com - - [01/Aug/1995:01:36:23 -0400] \"GET /history/apollo/a-001/movies/ HTTP/1.0\" 404 -$                      |\n|h96-158.ccnet.com - - [01/Aug/1995:01:36:30 -0400] \"GET /history/apollo/a-001/a-001-patch-small.gif HTTP/1.0\" 404 -$        |\n|h96-158.ccnet.com - - [01/Aug/1995:01:36:38 -0400] \"GET /history/apollo/a-001/movies/ HTTP/1.0\" 404 -$                      |\n|h96-158.ccnet.com - - [01/Aug/1995:01:36:42 -0400] \"GET /history/apollo/a-001/a-001-patch-small.gif HTTP/1.0\" 404 -$        |\n|h96-158.ccnet.com - - [01/Aug/1995:01:36:44 -0400] \"GET /history/apollo/a-001/images/ HTTP/1.0\" 404 -$                      |\n|h96-158.ccnet.com - - [01/Aug/1995:01:36:47 -0400] \"GET /history/apollo/a-001/a-001-patch-small.gif HTTP/1.0\" 404 -$        |\n|h96-158.ccnet.com - - [01/Aug/1995:01:37:04 -0400] \"GET /history/apollo/a-004/a-004-patch-small.gif HTTP/1.0\" 404 -$        |\n|h96-158.ccnet.com - - [01/Aug/1995:01:37:05 -0400] \"GET /history/apollo/a-004/movies/ HTTP/1.0\" 404 -$                      |\n+----------------------------------------------------------------------------------------------------------------------------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113349_1189445894",
      "id": "20160718-200445_212592333",
      "dateCreated": "2020-08-01 15:05:13.349",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (2d) Fix the rows with null content\\_size\n\nThe easiest solution is to replace the null values in `split_df` with 0. The DataFrame API provides a set of functions and fields specifically designed for working with null values, among them:\n\n* [fillna()](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.fillna), which fills null values with specified non-null values.\n* [na](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.na), which returns a [DataFrameNaFunctions](http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrameNaFunctions) object with many functions for operating on null columns.\n\nWe\u0027ll use `fillna()`, because it\u0027s simple. There are several ways to invoke this function. The easiest is just to replace _all_ null columns with known values. But, for safety, it\u0027s better to pass a Python dictionary containing (column\\_name, value) mappings. That\u0027s what we\u0027ll do.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.360",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(2d) Fix the rows with null content_size\u003c/h3\u003e\n\u003cp\u003eThe easiest solution is to replace the null values in \u003ccode\u003esplit_df\u003c/code\u003e with 0. The DataFrame API provides a set of functions and fields specifically designed for working with null values, among them:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href\u003d\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.fillna\"\u003efillna()\u003c/a\u003e, which fills null values with specified non-null values.\u003c/li\u003e\n\u003cli\u003e\u003ca href\u003d\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrame.na\"\u003ena\u003c/a\u003e, which returns a \u003ca href\u003d\"http://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.DataFrameNaFunctions\"\u003eDataFrameNaFunctions\u003c/a\u003e object with many functions for operating on null columns.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe\u0027ll use \u003ccode\u003efillna()\u003c/code\u003e, because it\u0027s simple. There are several ways to invoke this function. The easiest is just to replace \u003cem\u003eall\u003c/em\u003e null columns with known values. But, for safety, it\u0027s better to pass a Python dictionary containing (column_name, value) mappings. That\u0027s what we\u0027ll do.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113355_-883344705",
      "id": "20160721-213152_1800712122",
      "dateCreated": "2020-08-01 15:05:13.356",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\n# Replace all null content_size values with 0.\ncleaned_df \u003d split_df.fillna({\u0027content_size\u0027: 0})",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.366",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113362_-1445811819",
      "id": "20160718-200611_314088170",
      "dateCreated": "2020-08-01 15:05:13.362",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\n# Ensure that there are no nulls left.\nexprs \u003d []\nfor col_name in cleaned_df.columns:\n  exprs.append(count_null(col_name))\n\ncleaned_df.agg(*exprs).show()",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.377",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----+---------+----+------+------------+\n|host|timestamp|path|status|content_size|\n+----+---------+----+------+------------+\n|   0|        0|   0|     0|           0|\n+----+---------+----+------+------------+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113373_-944876993",
      "id": "20160718-200631_2138789122",
      "dateCreated": "2020-08-01 15:05:13.373",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (2e) Parsing the timestamp.\n\nOkay, now that we have a clean, parsed DataFrame, we have to parse the timestamp field into an actual timestamp. The Common Log Format time is somewhat non-standard. A User-Defined Function (UDF) is the most straightforward way to parse it.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.383",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(2e) Parsing the timestamp.\u003c/h3\u003e\n\u003cp\u003eOkay, now that we have a clean, parsed DataFrame, we have to parse the timestamp field into an actual timestamp. The Common Log Format time is somewhat non-standard. A User-Defined Function (UDF) is the most straightforward way to parse it.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113379_752459149",
      "id": "20160721-213247_360874576",
      "dateCreated": "2020-08-01 15:05:13.379",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nfrom pyspark.sql.functions import udf\n\nmonth_map \u003d {\n  \u0027Jan\u0027: 1, \u0027Feb\u0027: 2, \u0027Mar\u0027:3, \u0027Apr\u0027:4, \u0027May\u0027:5, \u0027Jun\u0027:6, \u0027Jul\u0027:7,\n  \u0027Aug\u0027:8,  \u0027Sep\u0027: 9, \u0027Oct\u0027:10, \u0027Nov\u0027: 11, \u0027Dec\u0027: 12\n}\n\ndef parse_clf_time(s):\n    \"\"\" Convert Common Log time format into a Python datetime object\n    Args:\n        s (str): date and time in Apache time format [dd/mmm/yyyy:hh:mm:ss (+/-)zzzz]\n    Returns:\n        a string suitable for passing to CAST(\u0027timestamp\u0027)\n    \"\"\"\n    # NOTE: We\u0027re ignoring time zone here. In a production application, you\u0027d want to handle that.\n    return \"{0:04d}-{1:02d}-{2:02d} {3:02d}:{4:02d}:{5:02d}\".format(\n      int(s[7:11]),\n      month_map[s[3:6]],\n      int(s[0:2]),\n      int(s[12:14]),\n      int(s[15:17]),\n      int(s[18:20])\n    )\n\nu_parse_time \u003d udf(parse_clf_time)\n\nlogs_df \u003d cleaned_df.select(\u0027*\u0027, u_parse_time(cleaned_df[\u0027timestamp\u0027]).cast(\u0027timestamp\u0027).alias(\u0027time\u0027)).drop(\u0027timestamp\u0027)\ntotal_log_entries \u003d logs_df.count()\n\nprint total_log_entries",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.388",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "1043177\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113385_-940715473",
      "id": "20160718-200648_780067911",
      "dateCreated": "2020-08-01 15:05:13.385",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nlogs_df.printSchema()",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.395",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "root\n |-- host: string (nullable \u003d true)\n |-- path: string (nullable \u003d true)\n |-- status: integer (nullable \u003d true)\n |-- content_size: integer (nullable \u003d false)\n |-- time: timestamp (nullable \u003d true)\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113391_2093318506",
      "id": "20160718-200730_1083966913",
      "dateCreated": "2020-08-01 15:05:13.391",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nlogs_df.show(truncate \u003d False)",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.401",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----------------------------+---------------------------------------------------+------+------------+---------------------+\n|host                        |path                                               |status|content_size|time                 |\n+----------------------------+---------------------------------------------------+------+------------+---------------------+\n|in24.inetnebr.com           |/shuttle/missions/sts-68/news/sts-68-mcc-05.txt    |200   |1839        |1995-08-01 00:00:01.0|\n|uplherc.upl.com             |/                                                  |304   |0           |1995-08-01 00:00:07.0|\n|uplherc.upl.com             |/images/ksclogo-medium.gif                         |304   |0           |1995-08-01 00:00:08.0|\n|uplherc.upl.com             |/images/MOSAIC-logosmall.gif                       |304   |0           |1995-08-01 00:00:08.0|\n|uplherc.upl.com             |/images/USA-logosmall.gif                          |304   |0           |1995-08-01 00:00:08.0|\n|ix-esc-ca2-07.ix.netcom.com |/images/launch-logo.gif                            |200   |1713        |1995-08-01 00:00:09.0|\n|uplherc.upl.com             |/images/WORLD-logosmall.gif                        |304   |0           |1995-08-01 00:00:10.0|\n|slppp6.intermind.net        |/history/skylab/skylab.html                        |200   |1687        |1995-08-01 00:00:10.0|\n|piweba4y.prodigy.com        |/images/launchmedium.gif                           |200   |11853       |1995-08-01 00:00:10.0|\n|slppp6.intermind.net        |/history/skylab/skylab-small.gif                   |200   |9202        |1995-08-01 00:00:11.0|\n|slppp6.intermind.net        |/images/ksclogosmall.gif                           |200   |3635        |1995-08-01 00:00:12.0|\n|ix-esc-ca2-07.ix.netcom.com |/history/apollo/images/apollo-logo1.gif            |200   |1173        |1995-08-01 00:00:12.0|\n|slppp6.intermind.net        |/history/apollo/images/apollo-logo.gif             |200   |3047        |1995-08-01 00:00:13.0|\n|uplherc.upl.com             |/images/NASA-logosmall.gif                         |304   |0           |1995-08-01 00:00:14.0|\n|133.43.96.45                |/shuttle/missions/sts-69/mission-sts-69.html       |200   |10566       |1995-08-01 00:00:16.0|\n|kgtyk4.kj.yamagata-u.ac.jp  |/                                                  |200   |7280        |1995-08-01 00:00:17.0|\n|kgtyk4.kj.yamagata-u.ac.jp  |/images/ksclogo-medium.gif                         |200   |5866        |1995-08-01 00:00:18.0|\n|d0ucr6.fnal.gov             |/history/apollo/apollo-16/apollo-16.html           |200   |2743        |1995-08-01 00:00:19.0|\n|ix-esc-ca2-07.ix.netcom.com |/shuttle/resources/orbiters/discovery.html         |200   |6849        |1995-08-01 00:00:19.0|\n|d0ucr6.fnal.gov             |/history/apollo/apollo-16/apollo-16-patch-small.gif|200   |14897       |1995-08-01 00:00:20.0|\n+----------------------------+---------------------------------------------------+------+------------+---------------------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113397_-1413940608",
      "id": "20160718-201656_1316433772",
      "dateCreated": "2020-08-01 15:05:13.397",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nLet\u0027s cache logs_df. We\u0027re going to be using it quite a bit from here forward.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.408",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eLet\u0027s cache logs_df. We\u0027re going to be using it quite a bit from here forward.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113404_-698140889",
      "id": "20160721-213319_1843703416",
      "dateCreated": "2020-08-01 15:05:13.404",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nlogs_df.cache()",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.413",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113409_1148940490",
      "id": "20160718-201706_792557368",
      "dateCreated": "2020-08-01 15:05:13.409",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n## Part 3: Analysis Walk-Through on the Web Server Log File\n\nNow that we have a DataFrame containing the parsed log file as a set of Row objects, we can perform various analyses.\n\n### (3a) Example: Content Size Statistics\n\nLet\u0027s compute some statistics about the sizes of content being returned by the web server. In particular, we\u0027d like to know what are the average, minimum, and maximum content sizes.\n\nWe can compute the statistics by calling `.describe()` on the `content_size` column of `logs_df`.  The `.describe()` function returns the count, mean, stddev, min, and max of a given column.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.420",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003ePart 3: Analysis Walk-Through on the Web Server Log File\u003c/h2\u003e\n\u003cp\u003eNow that we have a DataFrame containing the parsed log file as a set of Row objects, we can perform various analyses.\u003c/p\u003e\n\u003ch3\u003e(3a) Example: Content Size Statistics\u003c/h3\u003e\n\u003cp\u003eLet\u0027s compute some statistics about the sizes of content being returned by the web server. In particular, we\u0027d like to know what are the average, minimum, and maximum content sizes.\u003c/p\u003e\n\u003cp\u003eWe can compute the statistics by calling \u003ccode\u003e.describe()\u003c/code\u003e on the \u003ccode\u003econtent_size\u003c/code\u003e column of \u003ccode\u003elogs_df\u003c/code\u003e.  The \u003ccode\u003e.describe()\u003c/code\u003e function returns the count, mean, stddev, min, and max of a given column.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113415_152061848",
      "id": "20160721-213338_215734708",
      "dateCreated": "2020-08-01 15:05:13.415",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\n# Calculate statistics based on the content size.\ncontent_size_summary_df \u003d logs_df.describe([\u0027content_size\u0027])\ncontent_size_summary_df.show()",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.426",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+------------------+\n|summary|      content_size|\n+-------+------------------+\n|  count|           1043177|\n|   mean|17531.555702435926|\n| stddev| 68561.99906264187|\n|    min|                 0|\n|    max|           3421948|\n+-------+------------------+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113421_-1611770882",
      "id": "20160718-202001_878461975",
      "dateCreated": "2020-08-01 15:05:13.422",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nAlternatively, we can use SQL to directly calculate these statistics.  You can explore the many useful functions within the `pyspark.sql.functions` module in the [documentation](https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#module-pyspark.sql.functions).\n\nAfter we apply the `.agg()` function, we call `.first()` to extract the first value, which is equivalent to `.take(1)[0]`.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.432",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eAlternatively, we can use SQL to directly calculate these statistics.  You can explore the many useful functions within the \u003ccode\u003epyspark.sql.functions\u003c/code\u003e module in the \u003ca href\u003d\"https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#module-pyspark.sql.functions\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAfter we apply the \u003ccode\u003e.agg()\u003c/code\u003e function, we call \u003ccode\u003e.first()\u003c/code\u003e to extract the first value, which is equivalent to \u003ccode\u003e.take(1)[0]\u003c/code\u003e.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113428_63644594",
      "id": "20160721-213401_647137257",
      "dateCreated": "2020-08-01 15:05:13.428",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nfrom pyspark.sql import functions as sqlFunctions\n\nstats \u003d  (logs_df\n            .agg(sqlFunctions.min(logs_df[\u0027content_size\u0027]),\n                 sqlFunctions.avg(logs_df[\u0027content_size\u0027]),\n                 sqlFunctions.max(logs_df[\u0027content_size\u0027]))\n            .first())\n\nprint \u0027Using SQL functions:\u0027\nprint \u0027Content Size Avg: %.02f Min: %.02f; Max: %.02f\u0027 % (stats[\u0027avg(content_size)\u0027], stats[\u0027min(content_size)\u0027], stats[\u0027max(content_size)\u0027])\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.438",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Using SQL functions:\nContent Size Avg: 17531.56 Min: 0.00; Max: 3421948.00\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113434_-399941937",
      "id": "20160718-202032_221945837",
      "dateCreated": "2020-08-01 15:05:13.434",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (3b) Example: HTTP Status Analysis\n\nNext, let\u0027s look at the status values that appear in the log. We want to know which status values appear in the data and how many times.  We again start with `logs_df`, then group by the `status` column, apply the `.count()` aggregation function, and sort by the `status` column.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.444",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(3b) Example: HTTP Status Analysis\u003c/h3\u003e\n\u003cp\u003eNext, let\u0027s look at the status values that appear in the log. We want to know which status values appear in the data and how many times.  We again start with \u003ccode\u003elogs_df\u003c/code\u003e, then group by the \u003ccode\u003estatus\u003c/code\u003e column, apply the \u003ccode\u003e.count()\u003c/code\u003e aggregation function, and sort by the \u003ccode\u003estatus\u003c/code\u003e column.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113440_-1214170853",
      "id": "20160721-213426_1090267607",
      "dateCreated": "2020-08-01 15:05:13.440",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nstatus_to_count_df \u003d(logs_df\n                     .groupBy(\u0027status\u0027)\n                     .count()\n                     .sort(\u0027status\u0027)\n                     .cache())\n\nstatus_to_count_length \u003d status_to_count_df.count()\nprint \u0027Found %d response codes\u0027 % status_to_count_length\nstatus_to_count_df.show()\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.450",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Found 7 response codes\n+------+------+\n|status| count|\n+------+------+\n|   200|940847|\n|   302| 16244|\n|   304| 79824|\n|   403|    58|\n|   404|  6185|\n|   500|     2|\n|   501|    17|\n+------+------+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113446_158540745",
      "id": "20160718-202106_1792027802",
      "dateCreated": "2020-08-01 15:05:13.446",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nassert status_to_count_length \u003d\u003d 7\nassert status_to_count_df.take(100) \u003d\u003d [(200, 940847), (302, 16244), (304, 79824), (403, 58), (404, 6185), (500, 2), (501, 17)]\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.456",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113452_217265470",
      "id": "20160718-203631_1933692996",
      "dateCreated": "2020-08-01 15:05:13.452",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (3c) Example: Status Graphing\n\nNow, let\u0027s visualize the results from the last example.  We can seamlessly switch over to the \u0027%sql\u0027 interpreter to show a bar chart of the count for each response code. You can see that this is not a very effective plot.  Due to the large number of \u0027200\u0027 codes, it is very hard to see the relative number of the others.  We can alleviate this by taking the logarithm of the count, adding that as a column to our DataFrame and displaying the result.\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.462",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(3c) Example: Status Graphing\u003c/h3\u003e\n\u003cp\u003eNow, let\u0027s visualize the results from the last example.  We can seamlessly switch over to the \u0027%sql\u0027 interpreter to show a bar chart of the count for each response code. You can see that this is not a very effective plot.  Due to the large number of \u0027200\u0027 codes, it is very hard to see the relative number of the others.  We can alleviate this by taking the logarithm of the count, adding that as a column to our DataFrame and displaying the result.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113457_-629027977",
      "id": "20160721-213602_558712068",
      "dateCreated": "2020-08-01 15:05:13.458",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nlog_status_to_count_df \u003d status_to_count_df.withColumn(\u0027log_count\u0027, sqlFunctions.log(status_to_count_df[\u0027count\u0027]))\nlog_status_to_count_df.show()",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.469",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------+------+------------------+\n|status| count|         log_count|\n+------+------+------------------+\n|   200|940847| 13.75453581236166|\n|   302| 16244|  9.69547888880619|\n|   304| 79824|11.287579490100818|\n|   403|    58| 4.060443010546419|\n|   404|  6185| 8.729882284826589|\n|   500|     2|0.6931471805599453|\n|   501|    17| 2.833213344056216|\n+------+------+------------------+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113464_395960069",
      "id": "20160718-203658_1473188241",
      "dateCreated": "2020-08-01 15:05:13.464",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nNext, we\u0027ll register the contents of the DataFrame as a temp table, backed by Hive metastore, so we can write sql queries against the data. \n\nAfter running the SQL \u0027select\u0027 cell below, choose one or more of the display options available, and then open the \"settings\" tab and drag `status` to the key entry field and drag `log_count` to the value entry field. See the diagram, below, for an example.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.474",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eNext, we\u0027ll register the contents of the DataFrame as a temp table, backed by Hive metastore, so we can write sql queries against the data.\u003c/p\u003e\n\u003cp\u003eAfter running the SQL \u0027select\u0027 cell below, choose one or more of the display options available, and then open the \u0026ldquo;settings\u0026rdquo; tab and drag \u003ccode\u003estatus\u003c/code\u003e to the key entry field and drag \u003ccode\u003elog_count\u003c/code\u003e to the value entry field. See the diagram, below, for an example.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113470_-1770120197",
      "id": "20160722-191107_1130696257",
      "dateCreated": "2020-08-01 15:05:13.471",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nprint log_status_to_count_df.columns\nlog_status_to_count_df.registerTempTable(\"logstatus\")\nprint sqlContext.read.table(\u0027logstatus\u0027).dtypes",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.479",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[\u0027status\u0027, \u0027count\u0027, \u0027log_count\u0027]\n[(\u0027status\u0027, \u0027int\u0027), (\u0027count\u0027, \u0027bigint\u0027), (\u0027log_count\u0027, \u0027double\u0027)]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113476_602527454",
      "id": "20160722-154558_417576869",
      "dateCreated": "2020-08-01 15:05:13.476",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\n\nselect status, log_count from logstatus",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:07:18.588",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": [
          {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "status",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "log_count",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "status",
                  "index": 0.0,
                  "aggr": "sum"
                }
              },
              "setting": {
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                }
              },
              "commonSetting": {}
            }
          }
        ],
        "enabled": true,
        "fontSize": 9.0,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "status\tlog_count\n200\t13.75453581236166\n302\t9.69547888880619\n304\t11.287579490100818\n403\t4.060443010546419\n404\t8.729882284826589\n500\t0.6931471805599453\n501\t2.833213344056216\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113480_1862682909",
      "id": "20160722-154539_189658824",
      "dateCreated": "2020-08-01 15:05:13.480",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (3d) Example: Frequent Hosts\n\nLet\u0027s look at hosts that have accessed the server frequently (e.g., more than ten times). As with the response code analysis in (3b), we create a new DataFrame by grouping `successLogsDF` by the \u0027host\u0027 column and aggregating by count.\n\nWe then filter the result based on the count of accesses by each host being greater than ten.  Then, we select the \u0027host\u0027 column and show 20 elements from the result.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.489",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(3d) Example: Frequent Hosts\u003c/h3\u003e\n\u003cp\u003eLet\u0027s look at hosts that have accessed the server frequently (e.g., more than ten times). As with the response code analysis in (3b), we create a new DataFrame by grouping \u003ccode\u003esuccessLogsDF\u003c/code\u003e by the \u0027host\u0027 column and aggregating by count.\u003c/p\u003e\n\u003cp\u003eWe then filter the result based on the count of accesses by each host being greater than ten.  Then, we select the \u0027host\u0027 column and show 20 elements from the result.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113486_-34660590",
      "id": "20160722-191832_137511351",
      "dateCreated": "2020-08-01 15:05:13.486",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\n# Any hosts that has accessed the server more than 10 times.\nhost_sum_df \u003d(logs_df\n              .groupBy(\u0027host\u0027)\n              .count())\n\nhost_more_than_10_df \u003d (host_sum_df\n                        .filter(host_sum_df[\u0027count\u0027] \u003e 10)\n                        .select(host_sum_df[\u0027host\u0027]))\n\nprint \u0027Any 20 hosts that have accessed more then 10 times:\\n\u0027\nhost_more_than_10_df.show(truncate\u003dFalse)",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.494",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Any 20 hosts that have accessed more then 10 times:\n\n+-----------------------------+\n|host                         |\n+-----------------------------+\n|gcl-s2.aero.kyushu-u.ac.jp   |\n|dd09-015.compuserve.com      |\n|sun8.hrz.th-darmstadt.de     |\n|128.159.144.47               |\n|160.151.233.33               |\n|128.159.132.13               |\n|s025n217.ummed.edu           |\n|204.126.175.80               |\n|n1043367.ksc.nasa.gov        |\n|128.159.140.124              |\n|hermes.rz.uni-duesseldorf.de |\n|csa.bu.edu                   |\n|139.169.136.137              |\n|knet.kntl.co.kr              |\n|pcmnbib03.uio.no             |\n|ppp2_100.bekkoame.or.jp      |\n|hp3.lsw.uni-heidelberg.de    |\n|163.205.105.9                |\n|netcom9.netcom.com           |\n|dd24-025.compuserve.com      |\n+-----------------------------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113491_2084043054",
      "id": "20160718-203737_92678960",
      "dateCreated": "2020-08-01 15:05:13.491",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (3e) Example: Visualizing Paths\n\nNow, let\u0027s visualize the number of hits to paths (URIs) in the log. To perform this task, we start with our `logs_df` and group by the `path` column, aggregate by count, and sort in descending order.\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.499",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(3e) Example: Visualizing Paths\u003c/h3\u003e\n\u003cp\u003eNow, let\u0027s visualize the number of hits to paths (URIs) in the log. To perform this task, we start with our \u003ccode\u003elogs_df\u003c/code\u003e and group by the \u003ccode\u003epath\u003c/code\u003e column, aggregate by count, and sort in descending order.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113496_-1327006049",
      "id": "20160722-191924_1596254266",
      "dateCreated": "2020-08-01 15:05:13.496",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\npaths_df \u003d (logs_df\n            .groupBy(\u0027path\u0027)\n            .count()\n            .sort(\u0027count\u0027, ascending\u003dFalse))\n\npaths_counts \u003d (paths_df\n                .select(\u0027path\u0027, \u0027count\u0027)\n                .map(lambda r: (r[0], r[1]))\n                .collect())\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.503",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113500_142915931",
      "id": "20160718-211843_299092782",
      "dateCreated": "2020-08-01 15:05:13.500",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nOptional: We can extract the paths and the counts, and unpack the resulting list of `Rows` using a `map` function and `lambda` expression. This would allow us to find particular paths, such as those that describe the fateful Apollo 13 mission.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.507",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eOptional: We can extract the paths and the counts, and unpack the resulting list of \u003ccode\u003eRows\u003c/code\u003e using a \u003ccode\u003emap\u003c/code\u003e function and \u003ccode\u003elambda\u003c/code\u003e expression. This would allow us to find particular paths, such as those that describe the fateful Apollo 13 mission.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113505_-1358372692",
      "id": "20160722-193401_1732241902",
      "dateCreated": "2020-08-01 15:05:13.505",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\npaths, counts \u003d zip(*paths_counts)\n\nfor p in paths:\n    if p.startswith(\u0027/history/apollo/apollo13\u0027):\n        print p",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.512",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "/history/apollo/apollo13/apollo-13.html\n/history/apollo/apollo13/apollo-13-info.html\n/history/apollo/apollo13/movies/apo13home.mpg\n/history/apollo/apollo13\n/history/apollo/apollo13/apollo13.html\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113509_-2042229524",
      "id": "20160722-193156_1307759391",
      "dateCreated": "2020-08-01 15:05:13.509",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (3f) Example: Top Paths\n\nFor the final example, we\u0027ll find the top paths (URIs) in the log.  Because we sorted `paths_df` for plotting, all we need to do is call `.show()` and pass in `n\u003d10` and `truncate\u003dFalse` as the parameters to show the top ten paths without truncating.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.517",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(3f) Example: Top Paths\u003c/h3\u003e\n\u003cp\u003eFor the final example, we\u0027ll find the top paths (URIs) in the log.  Because we sorted \u003ccode\u003epaths_df\u003c/code\u003e for plotting, all we need to do is call \u003ccode\u003e.show()\u003c/code\u003e and pass in \u003ccode\u003en\u003d10\u003c/code\u003e and \u003ccode\u003etruncate\u003dFalse\u003c/code\u003e as the parameters to show the top ten paths without truncating.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113514_2047774025",
      "id": "20160722-193447_577294938",
      "dateCreated": "2020-08-01 15:05:13.514",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nprint \u0027Top Ten Paths:\u0027\npaths_df.show(n\u003d10, truncate\u003dFalse)\n\nexpected \u003d [\n  (u\u0027/images/NASA-logosmall.gif\u0027, 59666),\n  (u\u0027/images/KSC-logosmall.gif\u0027, 50420),\n  (u\u0027/images/MOSAIC-logosmall.gif\u0027, 43831),\n  (u\u0027/images/USA-logosmall.gif\u0027, 43604),\n  (u\u0027/images/WORLD-logosmall.gif\u0027, 43217),\n  (u\u0027/images/ksclogo-medium.gif\u0027, 41267),\n  (u\u0027/ksc.html\u0027, 28536),\n  (u\u0027/history/apollo/images/apollo-logo1.gif\u0027, 26766),\n  (u\u0027/images/launch-logo.gif\u0027, 24742),\n  (u\u0027/\u0027, 20173)\n]\nassert paths_df.take(10) \u003d\u003d expected, \u0027incorrect Top Ten Paths\u0027\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.521",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Top Ten Paths:\n+---------------------------------------+-----+\n|path                                   |count|\n+---------------------------------------+-----+\n|/images/NASA-logosmall.gif             |59666|\n|/images/KSC-logosmall.gif              |50420|\n|/images/MOSAIC-logosmall.gif           |43831|\n|/images/USA-logosmall.gif              |43604|\n|/images/WORLD-logosmall.gif            |43217|\n|/images/ksclogo-medium.gif             |41267|\n|/ksc.html                              |28536|\n|/history/apollo/images/apollo-logo1.gif|26766|\n|/images/launch-logo.gif                |24742|\n|/                                      |20173|\n+---------------------------------------+-----+\nonly showing top 10 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113518_-985218164",
      "id": "20160718-211914_242228510",
      "dateCreated": "2020-08-01 15:05:13.518",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n## Part 4: Analyzing Web Server Log File\n\nNow it is your turn to perform analyses on the web server log files.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.526",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003ePart 4: Analyzing Web Server Log File\u003c/h2\u003e\n\u003cp\u003eNow it is your turn to perform analyses on the web server log files.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113523_496885128",
      "id": "20160722-193742_1517160612",
      "dateCreated": "2020-08-01 15:05:13.523",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n**(4a) Exercise: Top Ten Error Paths**\n\nWhat are the top ten paths which did not have return code 200? Create a sorted list containing the paths and the number of times that they were accessed with a non-200 return code and show the top ten.\n\nThink about the steps that you need to perform to determine which paths did not have a 200 return code, how you will uniquely count those paths and sort the list.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.530",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003e\u003cstrong\u003e(4a) Exercise: Top Ten Error Paths\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhat are the top ten paths which did not have return code 200? Create a sorted list containing the paths and the number of times that they were accessed with a non-200 return code and show the top ten.\u003c/p\u003e\n\u003cp\u003eThink about the steps that you need to perform to determine which paths did not have a 200 return code, how you will uniquely count those paths and sort the list.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113527_-1240821751",
      "id": "20160722-193809_1481595131",
      "dateCreated": "2020-08-01 15:05:13.528",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\n# DataFrame containing all accesses that did not return a code 200\nfrom pyspark.sql.functions import desc, log\n\nnot200DF \u003d logs_df.filter(logs_df[\u0027status\u0027] !\u003d 200)",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.535",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113532_-1395173165",
      "id": "20160718-212016_221401993",
      "dateCreated": "2020-08-01 15:05:13.532",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\n# Sorted DataFrame containing all paths and the number of times they were accessed with non-200 return code\nlogs_sum_df \u003d not200DF.groupBy(\u0027path\u0027).count().sort(\u0027count\u0027, ascending\u003dFalse)\n\nprint \u0027Top Ten failed URLs:\u0027\nlogs_sum_df.show(10, False)\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.540",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Top Ten failed URLs:\n+---------------------------------------+-----+\n|path                                   |count|\n+---------------------------------------+-----+\n|/images/NASA-logosmall.gif             |8761 |\n|/images/KSC-logosmall.gif              |7236 |\n|/images/MOSAIC-logosmall.gif           |5197 |\n|/images/USA-logosmall.gif              |5157 |\n|/images/WORLD-logosmall.gif            |5020 |\n|/images/ksclogo-medium.gif             |4728 |\n|/history/apollo/images/apollo-logo1.gif|2907 |\n|/images/launch-logo.gif                |2811 |\n|/                                      |2199 |\n|/images/ksclogosmall.gif               |1622 |\n+---------------------------------------+-----+\nonly showing top 10 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113537_904496344",
      "id": "20160718-212055_410692090",
      "dateCreated": "2020-08-01 15:05:13.537",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ntop_10_err_urls \u003d [(row[0], row[1]) for row in logs_sum_df.take(10)]\ntop_10_err_expected \u003d [\n  (u\u0027/images/NASA-logosmall.gif\u0027, 8761),\n  (u\u0027/images/KSC-logosmall.gif\u0027, 7236),\n  (u\u0027/images/MOSAIC-logosmall.gif\u0027, 5197),\n  (u\u0027/images/USA-logosmall.gif\u0027, 5157),\n  (u\u0027/images/WORLD-logosmall.gif\u0027, 5020),\n  (u\u0027/images/ksclogo-medium.gif\u0027, 4728),\n  (u\u0027/history/apollo/images/apollo-logo1.gif\u0027, 2907),\n  (u\u0027/images/launch-logo.gif\u0027, 2811),\n  (u\u0027/\u0027, 2199),\n  (u\u0027/images/ksclogosmall.gif\u0027, 1622)\n]\n\nassert logs_sum_df.count() \u003d\u003d 7675, \u0027incorrect count for logs_sum_df\u0027\nassert top_10_err_urls \u003d\u003d top_10_err_expected, \u0027incorrect Top Ten failed URLs\u0027\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.545",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113542_-96040207",
      "id": "20160718-212113_968538624",
      "dateCreated": "2020-08-01 15:05:13.542",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (4b) Exercise: Number of Unique Hosts\n\nHow many unique hosts are there in the entire log?\n\nThere are multiple ways to find this.  Try to find a more optimal way than grouping by \u0027host\u0027.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.550",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(4b) Exercise: Number of Unique Hosts\u003c/h3\u003e\n\u003cp\u003eHow many unique hosts are there in the entire log?\u003c/p\u003e\n\u003cp\u003eThere are multiple ways to find this.  Try to find a more optimal way than grouping by \u0027host\u0027.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113546_1494053911",
      "id": "20160722-194321_2111382895",
      "dateCreated": "2020-08-01 15:05:13.547",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nunique_host_count \u003d logs_df.select(\u0027host\u0027).distinct().count()\nprint \u0027Unique hosts: {0}\u0027.format(unique_host_count)",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.556",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Unique hosts: 54507\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113552_1177495650",
      "id": "20160718-212129_286712384",
      "dateCreated": "2020-08-01 15:05:13.552",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nassert unique_host_count \u003d\u003d 54507, \u0027incorrect unique_host_count\u0027",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.562",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113558_1526969080",
      "id": "20160718-212331_1613083931",
      "dateCreated": "2020-08-01 15:05:13.558",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (4c) Exercise: Number of Unique Daily Hosts\n\nFor an advanced exercise, let\u0027s determine the number of unique hosts in the entire log on a day-by-day basis. This computation will give us counts of the number of unique daily hosts. We\u0027d like a DataFrame sorted by increasing day of the month which includes the day of the month and the associated number of unique hosts for that day. Make sure you cache the resulting DataFrame `daily_hosts_df` so that we can reuse it in the next exercise.\n\nThink about the steps that you need to perform to count the number of different hosts that make requests *each* day.\n*Since the log only covers a single month, you can ignore the month.*  You may want to use the [`dayofmonth` function](https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.functions.dayofmonth) in the `pyspark.sql.functions` module.\n\n**Description of each variable**\n\n**`day_to_host_pair_df`**\n\nA DataFrame with two columns\n\n    | column | explanation          |\n    | ------ | -------------------- |\n    | `host` | the host name        |\n    | `day`  | the day of the month |\n\nThere will be one row in this DataFrame for each row in `logs_df`. Essentially, you\u0027re just trimming and transforming each row of `logs_df`. For example, for this row in `logs_df`:\n\n```\ngw1.att.com - - [23/Aug/1995:00:03:53 -0400] \"GET /shuttle/missions/sts-73/news HTTP/1.0\" 302 -\n```\n\nyour `day_to_host_pair_df` should have:\n\n```\ngw1.att.com 23\n```\n\n**`day_group_hosts_df`**\n\nThis DataFrame has the same columns as `day_to_host_pair_df`, but with duplicate (`day`, `host`) rows removed.\n\n**`daily_hosts_df`**\n\nA DataFrame with two columns:\n\n    | column  | explanation                                        |\n    | ------- | -------------------------------------------------- |\n    | `day`   | the day of the month                               |\n    | `count` | the number of unique requesting hosts for that day |\n    \n    ",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.570",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(4c) Exercise: Number of Unique Daily Hosts\u003c/h3\u003e\n\u003cp\u003eFor an advanced exercise, let\u0027s determine the number of unique hosts in the entire log on a day-by-day basis. This computation will give us counts of the number of unique daily hosts. We\u0027d like a DataFrame sorted by increasing day of the month which includes the day of the month and the associated number of unique hosts for that day. Make sure you cache the resulting DataFrame \u003ccode\u003edaily_hosts_df\u003c/code\u003e so that we can reuse it in the next exercise.\u003c/p\u003e\n\u003cp\u003eThink about the steps that you need to perform to count the number of different hosts that make requests \u003cem\u003eeach\u003c/em\u003e day.\n\u003cbr  /\u003e\u003cem\u003eSince the log only covers a single month, you can ignore the month.\u003c/em\u003e  You may want to use the \u003ca href\u003d\"https://spark.apache.org/docs/latest/api/python/pyspark.sql.html#pyspark.sql.functions.dayofmonth\"\u003e\u003ccode\u003edayofmonth\u003c/code\u003e function\u003c/a\u003e in the \u003ccode\u003epyspark.sql.functions\u003c/code\u003e module.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDescription of each variable\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eday_to_host_pair_df\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA DataFrame with two columns\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e| column | explanation          |\n| ------ | -------------------- |\n| `host` | the host name        |\n| `day`  | the day of the month |\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere will be one row in this DataFrame for each row in \u003ccode\u003elogs_df\u003c/code\u003e. Essentially, you\u0027re just trimming and transforming each row of \u003ccode\u003elogs_df\u003c/code\u003e. For example, for this row in \u003ccode\u003elogs_df\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egw1.att.com - - [23/Aug/1995:00:03:53 -0400] \"GET /shuttle/missions/sts-73/news HTTP/1.0\" 302 -\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eyour \u003ccode\u003eday_to_host_pair_df\u003c/code\u003e should have:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egw1.att.com 23\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eday_group_hosts_df\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThis DataFrame has the same columns as \u003ccode\u003eday_to_host_pair_df\u003c/code\u003e, but with duplicate (\u003ccode\u003eday\u003c/code\u003e, \u003ccode\u003ehost\u003c/code\u003e) rows removed.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003edaily_hosts_df\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eA DataFrame with two columns:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e| column  | explanation                                        |\n| ------- | -------------------------------------------------- |\n| `day`   | the day of the month                               |\n| `count` | the number of unique requesting hosts for that day |\n\u003c/code\u003e\u003c/pre\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113566_1094079522",
      "id": "20160722-194417_206107074",
      "dateCreated": "2020-08-01 15:05:13.566",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nfrom pyspark.sql.functions import dayofmonth\n\nday_to_host_pair_df \u003d logs_df.select(\u0027host\u0027, dayofmonth(\u0027time\u0027).alias(\u0027day\u0027))\n\nday_group_hosts_df \u003d day_to_host_pair_df.distinct()\n\ndaily_hosts_df \u003d day_group_hosts_df.groupBy(\u0027day\u0027).count()\ndaily_hosts_df.cache()\n\nprint \u0027Unique hosts per day:\u0027\ndaily_hosts_df.show(30, False)\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.576",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Unique hosts per day:\n+---+-----+\n|day|count|\n+---+-----+\n|1  |2582 |\n|3  |3222 |\n|4  |4190 |\n|5  |2502 |\n|6  |2537 |\n|7  |4106 |\n|8  |4406 |\n|9  |4317 |\n|10 |4523 |\n|11 |4346 |\n|12 |2864 |\n|13 |2650 |\n|14 |4454 |\n|15 |4214 |\n|16 |4340 |\n|17 |4385 |\n|18 |4168 |\n|19 |2550 |\n|20 |2560 |\n|21 |4134 |\n|22 |4456 |\n+---+-----+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113572_401149975",
      "id": "20160718-212353_745338793",
      "dateCreated": "2020-08-01 15:05:13.572",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nLet\u0027s make sure our data matches known good values.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.582",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eLet\u0027s make sure our data matches known good values.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113578_-688176364",
      "id": "20160723-180050_1724926025",
      "dateCreated": "2020-08-01 15:05:13.578",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ndaily_hosts_list \u003d (daily_hosts_df\n                    .map(lambda r: (r[0], r[1]))\n                    .take(30))\n                    \nassert day_to_host_pair_df.count() \u003d\u003d total_log_entries, \u0027incorrect row count for day_to_host_pair_df\u0027\nassert daily_hosts_df.count() \u003d\u003d 21, \u0027incorrect daily_hosts_df.count()\u0027\nassert daily_hosts_list \u003d\u003d [(1, 2582), (3, 3222), (4, 4190), (5, 2502), (6, 2537), (7, 4106), (8, 4406), (9, 4317), (10, 4523), (11, 4346), (12, 2864), (13, 2650), (14, 4454), (15, 4214), (16, 4340), (17, 4385), (18, 4168), (19, 2550), (20, 2560), (21, 4134), (22, 4456)], \u0027incorrect daily_hosts_df\u0027\nassert daily_hosts_df.is_cached \u003d\u003d True, \u0027incorrect daily_hosts_df.is_cached\u0027",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.588",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113584_-1649801407",
      "id": "20160718-212445_2056034580",
      "dateCreated": "2020-08-01 15:05:13.584",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (4d) Exercise: Visualizing the Number of Unique Daily Hosts\n\nUsing the results from the previous exercise, we will use built-in graphing to plot a line graph of the unique hosts requests by day.  We need a list of days called `days_with_hosts` and a list of the number of unique hosts for each corresponding day called `hosts`.\n\n**WARNING**: Simply calling `collect()` on your transformed DataFrame won\u0027t work, because `collect()` returns a list of Spark SQL `Row` objects. You must _extract_ the appropriate column values from the `Row` objects. Hint: A loop will help.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.594",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(4d) Exercise: Visualizing the Number of Unique Daily Hosts\u003c/h3\u003e\n\u003cp\u003eUsing the results from the previous exercise, we will use built-in graphing to plot a line graph of the unique hosts requests by day.  We need a list of days called \u003ccode\u003edays_with_hosts\u003c/code\u003e and a list of the number of unique hosts for each corresponding day called \u003ccode\u003ehosts\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWARNING\u003c/strong\u003e: Simply calling \u003ccode\u003ecollect()\u003c/code\u003e on your transformed DataFrame won\u0027t work, because \u003ccode\u003ecollect()\u003c/code\u003e returns a list of Spark SQL \u003ccode\u003eRow\u003c/code\u003e objects. You must \u003cem\u003eextract\u003c/em\u003e the appropriate column values from the \u003ccode\u003eRow\u003c/code\u003e objects. Hint: A loop will help.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113590_-576404934",
      "id": "20160722-194707_1722235998",
      "dateCreated": "2020-08-01 15:05:13.590",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ndays_with_hosts \u003d []\nhosts \u003d []\nfor row in daily_hosts_df.collect():\n    days_with_hosts.append(row[0])\n    hosts.append(row[1])\n\nprint (days_with_hosts)\nprint (hosts)",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.600",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n[2582, 3222, 4190, 2502, 2537, 4106, 4406, 4317, 4523, 4346, 2864, 2650, 4454, 4214, 4340, 4385, 4168, 2550, 2560, 4134, 4456]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113597_-1316827164",
      "id": "20160718-212614_81729699",
      "dateCreated": "2020-08-01 15:05:13.597",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ntest_days \u003d range(1, 23)\ntest_days.remove(2)\n\nassert days_with_hosts \u003d\u003d test_days, \u0027incorrect days\u0027\nassert hosts \u003d\u003d [2582, 3222, 4190, 2502, 2537, 4106, 4406, 4317, 4523, 4346, 2864, 2650, 4454, 4214, 4340, 4385, 4168, 2550, 2560, 4134, 4456], \u0027incorrect hosts\u0027\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.606",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113602_-1911189490",
      "id": "20160718-212842_1303069643",
      "dateCreated": "2020-08-01 15:05:13.602",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nNow, we can write out the `daily_hosts_df` DataFrame as a temp table; then we can write a SQL select statement to plot a line or bar graph of the unique hosts requests by day.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.613",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eNow, we can write out the \u003ccode\u003edaily_hosts_df\u003c/code\u003e DataFrame as a temp table; then we can write a SQL select statement to plot a line or bar graph of the unique hosts requests by day.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113608_-2110063066",
      "id": "20160722-194828_1547116231",
      "dateCreated": "2020-08-01 15:05:13.608",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ndaily_hosts_df.registerTempTable(\"daily_hosts\")\nprint daily_hosts_df.count()",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.619",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "21\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113615_2061532937",
      "id": "20160722-195054_1947786482",
      "dateCreated": "2020-08-01 15:05:13.615",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nMake sure there is a graph of daily_hosts below.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.625",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eMake sure there is a graph of daily_hosts below.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113621_-490122101",
      "id": "20160723-180641_1565768790",
      "dateCreated": "2020-08-01 15:05:13.621",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\n\nselect day, count from daily_hosts",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:07:25.333",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": [
          {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "day",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "count",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "day",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "count",
                  "index": 1.0,
                  "aggr": "sum"
                }
              },
              "setting": {
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                }
              },
              "commonSetting": {}
            }
          }
        ],
        "enabled": true,
        "fontSize": 9.0,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "day\tcount\n1\t2582\n3\t3222\n4\t4190\n5\t2502\n6\t2537\n7\t4106\n8\t4406\n9\t4317\n10\t4523\n11\t4346\n12\t2864\n13\t2650\n14\t4454\n15\t4214\n16\t4340\n17\t4385\n18\t4168\n19\t2550\n20\t2560\n21\t4134\n22\t4456\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113628_-1950660587",
      "id": "20160723-180450_514138223",
      "dateCreated": "2020-08-01 15:05:13.628",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (4e) Exercise: Average Number of Daily Requests per Host\n\nNext, let\u0027s determine the average number of requests on a day-by-day basis.  We\u0027d like a list by increasing day of the month and the associated average number of requests per host for that day. Make sure you cache the resulting DataFrame `avg_daily_req_per_host_df` so that we can reuse it in the next exercise.\n\nTo compute the average number of requests per host, find the total number of requests per day (across all hosts) and divide that by the number of unique hosts per day (which we found in part 4c and cached as `daily_hosts_df`).\n\n*Since the log only covers a single month, you can skip checking for the month.*",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.638",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(4e) Exercise: Average Number of Daily Requests per Host\u003c/h3\u003e\n\u003cp\u003eNext, let\u0027s determine the average number of requests on a day-by-day basis.  We\u0027d like a list by increasing day of the month and the associated average number of requests per host for that day. Make sure you cache the resulting DataFrame \u003ccode\u003eavg_daily_req_per_host_df\u003c/code\u003e so that we can reuse it in the next exercise.\u003c/p\u003e\n\u003cp\u003eTo compute the average number of requests per host, find the total number of requests per day (across all hosts) and divide that by the number of unique hosts per day (which we found in part 4c and cached as \u003ccode\u003edaily_hosts_df\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSince the log only covers a single month, you can skip checking for the month.\u003c/em\u003e\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113633_1680719340",
      "id": "20160723-180636_1447972081",
      "dateCreated": "2020-08-01 15:05:13.634",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ntotal_req_per_day_df_temp \u003d logs_df.select(\u0027host\u0027, dayofmonth(\u0027time\u0027).alias(\u0027day\u0027)).groupBy(\u0027day\u0027).count()\ntotal_req_per_day_df \u003d total_req_per_day_df_temp.withColumnRenamed(\u0027count\u0027, \u0027reqperday\u0027)\n\ntotal_req_per_day_df.show()",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.643",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+---------+\n|day|reqperday|\n+---+---------+\n|  1|    33996|\n|  3|    41387|\n|  4|    59554|\n|  5|    31888|\n|  6|    32416|\n|  7|    57355|\n|  8|    60142|\n|  9|    60457|\n| 10|    61245|\n| 11|    61242|\n| 12|    38070|\n| 13|    36480|\n| 14|    59873|\n| 15|    58845|\n| 16|    56651|\n| 17|    58980|\n| 18|    56244|\n| 19|    32092|\n| 20|    32963|\n| 21|    55539|\n+---+---------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113640_1136046441",
      "id": "20160718-213039_1241367186",
      "dateCreated": "2020-08-01 15:05:13.640",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nPlease note the `join` operator below; we want to combine `hosts per day` and `requests per day` into the same DataFrame.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.651",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003ePlease note the \u003ccode\u003ejoin\u003c/code\u003e operator below; we want to combine \u003ccode\u003ehosts per day\u003c/code\u003e and \u003ccode\u003erequests per day\u003c/code\u003e into the same DataFrame.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113647_-1102038408",
      "id": "20160723-180829_1442987636",
      "dateCreated": "2020-08-01 15:05:13.647",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\n# rename column\ndaily_hosts_per_day_df \u003d daily_hosts_df.withColumnRenamed(\u0027count\u0027, \u0027hostperday\u0027)\n\n# perform join operation\navg_daily_req_per_host_df \u003d (\n  total_req_per_day_df.join(daily_hosts_per_day_df, \u0027day\u0027, \u0027inner\u0027).select(\u0027day\u0027, \u0027hostperday\u0027, \u0027reqperday\u0027)\n  )\n\n# print \u0027Data types for data frame: %s\u0027 % avg_daily_req_per_host_df.dtypes\navg_daily_req_per_host_df.show()",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.656",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+----------+---------+\n|day|hostperday|reqperday|\n+---+----------+---------+\n|  1|      2582|    33996|\n|  3|      3222|    41387|\n|  4|      4190|    59554|\n|  5|      2502|    31888|\n|  6|      2537|    32416|\n|  7|      4106|    57355|\n|  8|      4406|    60142|\n|  9|      4317|    60457|\n| 10|      4523|    61245|\n| 11|      4346|    61242|\n| 12|      2864|    38070|\n| 13|      2650|    36480|\n| 14|      4454|    59873|\n| 15|      4214|    58845|\n| 16|      4340|    56651|\n| 17|      4385|    58980|\n| 18|      4168|    56244|\n| 19|      2550|    32092|\n| 20|      2560|    32963|\n| 21|      4134|    55539|\n+---+----------+---------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113653_1977411638",
      "id": "20160718-213054_1346319099",
      "dateCreated": "2020-08-01 15:05:13.653",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ndaily_req_per_host_list \u003d (\n  avg_daily_req_per_host_df.select(\n    col(\u0027day\u0027), col(\u0027reqperday\u0027).cast(\u0027float\u0027), col(\u0027hostperday\u0027).cast(\u0027float\u0027)).map(\n      lambda row: (row[0], row[1] / row[2])\n  ).collect()\n)\n\nprint (daily_req_per_host_list)",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.662",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[(1, 13.166537567776917), (3, 12.845127250155183), (4, 14.213365155131266), (5, 12.745003996802557), (6, 12.777296018919984), (7, 13.968582562104238), (8, 13.650022696323196), (9, 14.00440120454019), (10, 13.540791510059695), (11, 14.091578462954441), (12, 13.292597765363128), (13, 13.766037735849057), (14, 13.442523574315222), (15, 13.964167062173706), (16, 13.053225806451612), (17, 13.450399087799315), (18, 13.494241842610364), (19, 12.585098039215687), (20, 12.876171875), (21, 13.434687953555878), (22, 12.961849192100539)]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113658_-325582978",
      "id": "20160718-213133_1016933553",
      "dateCreated": "2020-08-01 15:05:13.659",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\navg_daily_req_per_host_df \u003d sqlContext.createDataFrame(daily_req_per_host_list, [\u0027day\u0027, \u0027avg_reqs_per_host_per_day\u0027])\n\navg_daily_req_per_host_df.cache()\n\nprint \u0027Average number of daily requests per Hosts is:\\n\u0027\navg_daily_req_per_host_df.show(100)\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.668",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Average number of daily requests per Hosts is:\n\n+---+-------------------------+\n|day|avg_reqs_per_host_per_day|\n+---+-------------------------+\n|  1|       13.166537567776917|\n|  3|       12.845127250155183|\n|  4|       14.213365155131266|\n|  5|       12.745003996802557|\n|  6|       12.777296018919984|\n|  7|       13.968582562104238|\n|  8|       13.650022696323196|\n|  9|        14.00440120454019|\n| 10|       13.540791510059695|\n| 11|       14.091578462954441|\n| 12|       13.292597765363128|\n| 13|       13.766037735849057|\n| 14|       13.442523574315222|\n| 15|       13.964167062173706|\n| 16|       13.053225806451612|\n| 17|       13.450399087799315|\n| 18|       13.494241842610364|\n| 19|       12.585098039215687|\n| 20|             12.876171875|\n| 21|       13.434687953555878|\n| 22|       12.961849192100539|\n+---+-------------------------+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113664_-1609427137",
      "id": "20160718-212933_1690059352",
      "dateCreated": "2020-08-01 15:05:13.665",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\n# TEST Average number of daily requests per hosts (4e)\navg_daily_req_per_host_list \u003d (\n  avg_daily_req_per_host_df.select(\u0027day\u0027, \n  avg_daily_req_per_host_df[\u0027avg_reqs_per_host_per_day\u0027].cast(\u0027integer\u0027).alias(\u0027avg_requests\u0027))\n                           .collect()\n)\n\nvalues \u003d [(row[0], row[1]) for row in avg_daily_req_per_host_list]\nprint values\n\nassert values \u003d\u003d [(1, 13), (3, 12), (4, 14), (5, 12), (6, 12), (7, 13), (8, 13), (9, 14), (10, 13), (11, 14), (12, 13), (13, 13), (14, 13), (15, 13), (16, 13), (17, 13), (18, 13), (19, 12), (20, 12), (21, 13), (22, 12)], \u0027incorrect avgDailyReqPerHostDF\u0027\nassert avg_daily_req_per_host_df.is_cached \u003d\u003d True, \u0027incorrect avg_daily_req_per_host_df.is_cached\u0027\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.673",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[(1, 13), (3, 12), (4, 14), (5, 12), (6, 12), (7, 13), (8, 13), (9, 14), (10, 13), (11, 14), (12, 13), (13, 13), (14, 13), (15, 13), (16, 13), (17, 13), (18, 13), (19, 12), (20, 12), (21, 13), (22, 12)]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113670_862210514",
      "id": "20160718-213035_1175278862",
      "dateCreated": "2020-08-01 15:05:13.670",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nLet\u0027s graph the results.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.679",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cp\u003eLet\u0027s graph the results.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113675_-1600773409",
      "id": "20160723-180952_412359229",
      "dateCreated": "2020-08-01 15:05:13.675",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\navg_daily_req_per_host_df.registerTempTable(\"req_per_host\")\nprint avg_daily_req_per_host_df.count()\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.685",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "21\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113681_-860107681",
      "id": "20160723-181052_1847519247",
      "dateCreated": "2020-08-01 15:05:13.681",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\n\nselect day, avg_reqs_per_host_per_day from req_per_host",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:07:50.878",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "day",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "avg_reqs_per_host_per_day",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "day",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "avg_reqs_per_host_per_day",
                  "index": 1.0,
                  "aggr": "sum"
                }
              },
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "day": "string",
                      "avg_reqs_per_host_per_day": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        ],
        "enabled": true,
        "fontSize": 9.0,
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "day\tavg_reqs_per_host_per_day\n1\t13.166537567776917\n3\t12.845127250155183\n4\t14.213365155131266\n5\t12.745003996802557\n6\t12.777296018919984\n7\t13.968582562104238\n8\t13.650022696323196\n9\t14.00440120454019\n10\t13.540791510059695\n11\t14.091578462954441\n12\t13.292597765363128\n13\t13.766037735849057\n14\t13.442523574315222\n15\t13.964167062173706\n16\t13.053225806451612\n17\t13.450399087799315\n18\t13.494241842610364\n19\t12.585098039215687\n20\t12.876171875\n21\t13.434687953555878\n22\t12.961849192100539\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113687_-1103722158",
      "id": "20160723-181013_89516033",
      "dateCreated": "2020-08-01 15:05:13.687",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ndays_with_avg \u003d []\navgs \u003d []\nfor day, avg in avg_daily_req_per_host_df.collect():\n  days_with_avg.append(day)\n  avgs.append(avg)\n\nprint(days_with_avg)\nprint(avgs)",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.697",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n[13.166537567776917, 12.845127250155183, 14.213365155131266, 12.745003996802557, 12.777296018919984, 13.968582562104238, 13.650022696323196, 14.00440120454019, 13.540791510059695, 14.091578462954441, 13.292597765363128, 13.766037735849057, 13.442523574315222, 13.964167062173706, 13.053225806451612, 13.450399087799315, 13.494241842610364, 12.585098039215687, 12.876171875, 13.434687953555878, 12.961849192100539]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113693_-407904189",
      "id": "20160718-213303_164194322",
      "dateCreated": "2020-08-01 15:05:13.693",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nassert days_with_avg \u003d\u003d [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], \u0027incorrect days\u0027\nassert [int(a) for a in avgs] \u003d\u003d [13, 12, 14, 12, 12, 13, 13, 14, 13, 14, 13, 13, 13, 13, 13, 13, 13, 12, 12, 13, 12], \u0027incorrect avgs\u0027",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.703",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113699_-1077525789",
      "id": "20160718-213414_1518372465",
      "dateCreated": "2020-08-01 15:05:13.699",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n## Part 5: Exploring 404 Status Codes\n\nLet\u0027s drill down and explore the error 404 status records. We\u0027ve all seen those \"404 Not Found\" web pages. 404 errors are returned when the server cannot find the resource (page or object) the browser or client requested.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.709",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch2\u003ePart 5: Exploring 404 Status Codes\u003c/h2\u003e\n\u003cp\u003eLet\u0027s drill down and explore the error 404 status records. We\u0027ve all seen those \u0026ldquo;404 Not Found\u0026rdquo; web pages. 404 errors are returned when the server cannot find the resource (page or object) the browser or client requested.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113705_-1760570669",
      "id": "20160723-181412_1191063726",
      "dateCreated": "2020-08-01 15:05:13.705",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (5a) Exercise: Counting 404 Response Codes\n\nCreate a DataFrame containing only log records with a 404 status code. Make sure you `cache()` the `not_found_df` as we will use it in the rest of this exercise.\n\nHow many 404 records are in the log?",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.718",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(5a) Exercise: Counting 404 Response Codes\u003c/h3\u003e\n\u003cp\u003eCreate a DataFrame containing only log records with a 404 status code. Make sure you \u003ccode\u003ecache()\u003c/code\u003e the \u003ccode\u003enot_found_df\u003c/code\u003e as we will use it in the rest of this exercise.\u003c/p\u003e\n\u003cp\u003eHow many 404 records are in the log?\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113712_-719871916",
      "id": "20160723-181654_2080362007",
      "dateCreated": "2020-08-01 15:05:13.712",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nprint logs_df.columns\nprint logs_df.dtypes",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.724",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[\u0027host\u0027, \u0027path\u0027, \u0027status\u0027, \u0027content_size\u0027, \u0027time\u0027]\n[(\u0027host\u0027, \u0027string\u0027), (\u0027path\u0027, \u0027string\u0027), (\u0027status\u0027, \u0027int\u0027), (\u0027content_size\u0027, \u0027int\u0027), (\u0027time\u0027, \u0027timestamp\u0027)]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113720_-1720559387",
      "id": "20160718-213712_1105242829",
      "dateCreated": "2020-08-01 15:05:13.720",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nfrom pyspark.sql.types import IntegerType\n\nnot_found_df \u003d logs_df.select(\u0027*\u0027).filter(logs_df[\u0027status\u0027] \u003d\u003d 404)\nnot_found_df.cache()\n\nprint \u0027Found {0} 404 URLs\u0027.format(not_found_df.count())",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.730",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Found 6185 404 URLs\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113726_1077785418",
      "id": "20160718-213459_1837816077",
      "dateCreated": "2020-08-01 15:05:13.726",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nassert not_found_df.count() \u003d\u003d 6185, \u0027incorrect not_found_df.count()\u0027\nassert not_found_df.is_cached \u003d\u003d True, \u0027incorrect not_found_df.is_cached\u0027",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.738",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113734_308608187",
      "id": "20160718-213533_793904823",
      "dateCreated": "2020-08-01 15:05:13.734",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (5b) Exercise: Listing 404 Status Code Records\n\nUsing the DataFrame containing only log records with a 404 status code that you cached in part (5a), print out a list up to 40 _distinct_ paths that generate 404 errors.\n\n**No path should appear more than once in your list.**",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.744",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(5b) Exercise: Listing 404 Status Code Records\u003c/h3\u003e\n\u003cp\u003eUsing the DataFrame containing only log records with a 404 status code that you cached in part (5a), print out a list up to 40 \u003cem\u003edistinct\u003c/em\u003e paths that generate 404 errors.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNo path should appear more than once in your list.\u003c/strong\u003e\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113740_-1620864321",
      "id": "20160723-181759_431470365",
      "dateCreated": "2020-08-01 15:05:13.740",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nnot_found_paths_df \u003d not_found_df.select(\u0027path\u0027)\nunique_not_found_paths_df \u003d not_found_paths_df.distinct()\n\nprint \u0027404 URLS:\\n\u0027\nunique_not_found_paths_df.show(n\u003d40, truncate\u003dFalse)",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.750",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "404 URLS:\n\n+--------------------------------------------------------------------+\n|path                                                                |\n+--------------------------------------------------------------------+\n|/history/discovery                                                  |\n|/history/apollo/apollo-13/apollo-13.html.                           |\n|/html/STS66.htm                                                     |\n|/www/shuttle/countdown/liftoff.html                                 |\n|/shuttle/missions/sts-25/images/images.html                         |\n|/shutttle/missions/sts-70/                                          |\n|/software.winvn.winvn.html                                          |\n|/images/KSCogosmall.gif                                             |\n|/news/sci.space.shuttle/archive/sci-space-shuttle-15-mar-1995-00.txt|\n|/astronaut-candidates/pub/FTPfiles/vomit-comet.postings             |\n|/history/apollo/apollo13                                            |\n|/statistics/1995/Jul/Jul95_request.gif                              |\n|/shuttle/resources/orbiters/discovery.gif                           |\n|://                                                                 |\n|/manned                                                             |\n|/128.159.104.89/tv/tv.html                                          |\n|/images/crawlerway.gif                                              |\n|/history/skylab/skylab-3.gif                                        |\n|/elv/SCOUT/elvpage.htm                                              |\n|/software/winvn/winvnhtml                                           |\n|/kscarea-small.gif                                                  |\n|/shuttle/mission/sts-69/countdown.html                              |\n|/history/apollo/a-001/movies/                                       |\n|/statistics/Mar.wwwstats.html                                       |\n|/history/apollo/pad-abort-test-1/pad-abort-test-1-patch-small.gif   |\n|/statistics/1995/Jul/Jul95_byte.gif                                 |\n|/ads/images/wsji_ad.gif                                             |\n|/.../liftoff.html                                                   |\n|/kcs.html                                                           |\n|/facilities/mil.htm/                                                |\n|/ksk.html                                                           |\n|/shuttle/technology/sts-newsref/sts-jsc.html\u0027                       |\n|/statistics/1995/Aug/Aug95_request.gif                              |\n|/.nasa.gov/shuttle/                                                 |\n|/\\\\yahoo.com                                                        |\n|/shuttle/missions/.html                                             |\n|/shuttle/missions/51-L/mission-51-l.html                            |\n|/history/apollo/a-004/movies/                                       |\n|/history/apollo/sa-1/docs/                                          |\n|/magazine/p08aug/08pet11.gif                                        |\n+--------------------------------------------------------------------+\nonly showing top 40 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113746_1204634233",
      "id": "20160718-214551_72576099",
      "dateCreated": "2020-08-01 15:05:13.746",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nbad_unique_paths_40 \u003d set([row[0] for row in unique_not_found_paths_df.take(40)])\n\nassert len(bad_unique_paths_40) \u003d\u003d 40, \u0027bad_unique_paths_40 not distinct\u0027",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.756",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113752_-1260333255",
      "id": "20160718-214612_397915329",
      "dateCreated": "2020-08-01 15:05:13.752",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (5c) Exercise: Listing the Top Twenty 404 Response Code paths\n\nUsing the DataFrame containing only log records with a 404 response code that you cached in part (5a), print out a list of the top twenty paths that generate the most 404 errors.\n\n*Remember, top paths should be in sorted order*",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.761",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(5c) Exercise: Listing the Top Twenty 404 Response Code paths\u003c/h3\u003e\n\u003cp\u003eUsing the DataFrame containing only log records with a 404 response code that you cached in part (5a), print out a list of the top twenty paths that generate the most 404 errors.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eRemember, top paths should be in sorted order\u003c/em\u003e\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113757_-1095883770",
      "id": "20160723-181927_436530443",
      "dateCreated": "2020-08-01 15:05:13.757",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ntop_20_not_found_df \u003d not_found_paths_df.groupBy(\u0027path\u0027).count().sort(\u0027count\u0027, ascending \u003d False)\n\nprint \u0027Top Twenty 404 URLs:\\n\u0027\ntop_20_not_found_df.show(n\u003d20, truncate\u003dFalse)\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.767",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Top Twenty 404 URLs:\n\n+-----------------------------------------------------------------+-----+\n|path                                                             |count|\n+-----------------------------------------------------------------+-----+\n|/pub/winvn/readme.txt                                            |633  |\n|/pub/winvn/release.txt                                           |494  |\n|/shuttle/missions/STS-69/mission-STS-69.html                     |430  |\n|/images/nasa-logo.gif                                            |319  |\n|/elv/DELTA/uncons.htm                                            |178  |\n|/shuttle/missions/sts-68/ksc-upclose.gif                         |154  |\n|/history/apollo/sa-1/sa-1-patch-small.gif                        |146  |\n|/images/crawlerway-logo.gif                                      |120  |\n|/://spacelink.msfc.nasa.gov                                      |117  |\n|/history/apollo/pad-abort-test-1/pad-abort-test-1-patch-small.gif|100  |\n|/history/apollo/a-001/a-001-patch-small.gif                      |97   |\n|/images/Nasa-logo.gif                                            |85   |\n|                                                                 |76   |\n|/shuttle/resources/orbiters/atlantis.gif                         |63   |\n|/history/apollo/images/little-joe.jpg                            |62   |\n|/images/lf-logo.gif                                              |59   |\n|/shuttle/resources/orbiters/discovery.gif                        |56   |\n|/shuttle/resources/orbiters/challenger.gif                       |54   |\n|/robots.txt                                                      |53   |\n|/history/apollo/pad-abort-test-2/pad-abort-test-2-patch-small.gif|38   |\n+-----------------------------------------------------------------+-----+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113763_-1850581635",
      "id": "20160718-214654_132253630",
      "dateCreated": "2020-08-01 15:05:13.763",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\n# TEST Top twenty 404 URLs (5c)\n\ntop_20_not_found \u003d [(row[0], row[1]) for row in top_20_not_found_df.take(20)]\ntop_20_expected \u003d [\n (u\u0027/pub/winvn/readme.txt\u0027, 633),\n (u\u0027/pub/winvn/release.txt\u0027, 494),\n (u\u0027/shuttle/missions/STS-69/mission-STS-69.html\u0027, 430),\n (u\u0027/images/nasa-logo.gif\u0027, 319),\n (u\u0027/elv/DELTA/uncons.htm\u0027, 178),\n (u\u0027/shuttle/missions/sts-68/ksc-upclose.gif\u0027, 154),\n (u\u0027/history/apollo/sa-1/sa-1-patch-small.gif\u0027, 146),\n (u\u0027/images/crawlerway-logo.gif\u0027, 120),\n (u\u0027/://spacelink.msfc.nasa.gov\u0027, 117),\n (u\u0027/history/apollo/pad-abort-test-1/pad-abort-test-1-patch-small.gif\u0027, 100),\n (u\u0027/history/apollo/a-001/a-001-patch-small.gif\u0027, 97),\n (u\u0027/images/Nasa-logo.gif\u0027, 85),\n (u\u0027\u0027, 76),\n (u\u0027/shuttle/resources/orbiters/atlantis.gif\u0027, 63),\n (u\u0027/history/apollo/images/little-joe.jpg\u0027, 62),\n (u\u0027/images/lf-logo.gif\u0027, 59),\n (u\u0027/shuttle/resources/orbiters/discovery.gif\u0027, 56),\n (u\u0027/shuttle/resources/orbiters/challenger.gif\u0027, 54),\n (u\u0027/robots.txt\u0027, 53),\n (u\u0027/history/apollo/pad-abort-test-2/pad-abort-test-2-patch-small.gif\u0027, 38)\n]\n\nassert top_20_not_found \u003d\u003d top_20_expected, \u0027incorrect top_20_not_found\u0027\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.774",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113769_504383315",
      "id": "20160718-214713_1503319001",
      "dateCreated": "2020-08-01 15:05:13.770",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (5d) Exercise: Listing the Top Twenty-five 404 Response Code Hosts\n\nInstead of looking at the paths that generated 404 errors, let\u0027s look at the hosts that encountered 404 errors. Using the DataFrame containing only log records with a 404 status codes that you cached in part (5a), print out a list of the top twenty-five hosts that generate the most 404 errors.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.780",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(5d) Exercise: Listing the Top Twenty-five 404 Response Code Hosts\u003c/h3\u003e\n\u003cp\u003eInstead of looking at the paths that generated 404 errors, let\u0027s look at the hosts that encountered 404 errors. Using the DataFrame containing only log records with a 404 status codes that you cached in part (5a), print out a list of the top twenty-five hosts that generate the most 404 errors.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113776_-860323448",
      "id": "20160723-182052_1374107064",
      "dateCreated": "2020-08-01 15:05:13.776",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nhosts_404_count_df \u003d not_found_df.groupBy(\u0027host\u0027).count().sort(\u0027count\u0027, ascending\u003dFalse)\n\nprint \u0027Top 25 hosts that generated errors:\\n\u0027\nhosts_404_count_df.show(n\u003d25, truncate\u003dFalse)\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.785",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Top 25 hosts that generated errors:\n\n+-----------------------------+-----+\n|host                         |count|\n+-----------------------------+-----+\n|piweba3y.prodigy.com         |39   |\n|maz3.maz.net                 |39   |\n|gate.barr.com                |38   |\n|ts8-1.westwood.ts.ucla.edu   |37   |\n|nexus.mlckew.edu.au          |37   |\n|m38-370-9.mit.edu            |37   |\n|204.62.245.32                |33   |\n|spica.sci.isas.ac.jp         |27   |\n|163.206.104.34               |27   |\n|www-d4.proxy.aol.com         |26   |\n|203.13.168.24                |25   |\n|203.13.168.17                |25   |\n|www-c4.proxy.aol.com         |25   |\n|internet-gw.watson.ibm.com   |24   |\n|piweba5y.prodigy.com         |23   |\n|scooter.pa-x.dec.com         |23   |\n|crl5.crl.com                 |23   |\n|onramp2-9.onr.com            |22   |\n|slip145-189.ut.nl.ibm.net    |22   |\n|198.40.25.102.sap2.artic.edu |21   |\n|gn2.getnet.com               |20   |\n|msp1-16.nas.mr.net           |20   |\n|tigger.nashscene.com         |19   |\n|dial055.mbnet.mb.ca          |19   |\n|isou24.vilspa.esa.es         |19   |\n+-----------------------------+-----+\nonly showing top 25 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113782_-1082062534",
      "id": "20160718-214746_1184403987",
      "dateCreated": "2020-08-01 15:05:13.782",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ntop_25_404 \u003d [(row[0], row[1]) for row in hosts_404_count_df.take(25)]\nassert len(top_25_404) \u003d\u003d 25, \u0027length of errHostsTop25 is not 25\u0027\n\nexpected \u003d set([\n  (u\u0027maz3.maz.net \u0027, 39),\n  (u\u0027piweba3y.prodigy.com \u0027, 39),\n  (u\u0027gate.barr.com \u0027, 38),\n  (u\u0027nexus.mlckew.edu.au \u0027, 37),\n  (u\u0027ts8-1.westwood.ts.ucla.edu \u0027, 37),\n  (u\u0027m38-370-9.mit.edu \u0027, 37),\n  (u\u0027204.62.245.32 \u0027, 33),\n  (u\u0027spica.sci.isas.ac.jp \u0027, 27),\n  (u\u0027163.206.104.34 \u0027, 27),\n  (u\u0027www-d4.proxy.aol.com \u0027, 26),\n  (u\u0027203.13.168.17 \u0027, 25),\n  (u\u0027203.13.168.24 \u0027, 25),\n  (u\u0027www-c4.proxy.aol.com \u0027, 25),\n  (u\u0027internet-gw.watson.ibm.com \u0027, 24),\n  (u\u0027crl5.crl.com \u0027, 23),\n  (u\u0027piweba5y.prodigy.com \u0027, 23),\n  (u\u0027scooter.pa-x.dec.com \u0027, 23),\n  (u\u0027onramp2-9.onr.com \u0027, 22),\n  (u\u0027slip145-189.ut.nl.ibm.net \u0027, 22),\n  (u\u0027198.40.25.102.sap2.artic.edu \u0027, 21),\n  (u\u0027msp1-16.nas.mr.net \u0027, 20),\n  (u\u0027gn2.getnet.com \u0027, 20),\n  (u\u0027tigger.nashscene.com \u0027, 19),\n  (u\u0027dial055.mbnet.mb.ca \u0027, 19),\n  (u\u0027isou24.vilspa.esa.es \u0027, 19)\n])\n\nassert (len(set(top_25_404) - expected)) \u003d\u003d 0, \u0027incorrect hosts_404_count_df\u0027\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.792",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113788_-52638824",
      "id": "20160718-214852_1529996792",
      "dateCreated": "2020-08-01 15:05:13.788",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (5e) Exercise: Listing 404 Errors per Day\n\nLet\u0027s explore the 404 records temporally. Break down the 404 requests by day (cache the `errors_by_date_sorted_df` DataFrame) and get the daily counts sorted by day in `errors_by_date_sorted_df`.\n\n*Since the log only covers a single month, you can ignore the month in your checks.*",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.797",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(5e) Exercise: Listing 404 Errors per Day\u003c/h3\u003e\n\u003cp\u003eLet\u0027s explore the 404 records temporally. Break down the 404 requests by day (cache the \u003ccode\u003eerrors_by_date_sorted_df\u003c/code\u003e DataFrame) and get the daily counts sorted by day in \u003ccode\u003eerrors_by_date_sorted_df\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSince the log only covers a single month, you can ignore the month in your checks.\u003c/em\u003e\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113794_-1464406603",
      "id": "20160723-182156_228944708",
      "dateCreated": "2020-08-01 15:05:13.794",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nerrors_by_date_sorted_df \u003d not_found_df.select(dayofmonth(\u0027time\u0027).alias(\u0027day\u0027)).groupBy(\u0027day\u0027).count()\nerrors_by_date_sorted_df.cache()\n\nprint \u0027404 Errors by day:\\n\u0027\nerrors_by_date_sorted_df.show(100)\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.804",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "404 Errors by day:\n\n+---+-----+\n|day|count|\n+---+-----+\n|  1|  243|\n|  3|  303|\n|  4|  346|\n|  5|  234|\n|  6|  372|\n|  7|  532|\n|  8|  381|\n|  9|  279|\n| 10|  314|\n| 11|  263|\n| 12|  195|\n| 13|  216|\n| 14|  287|\n| 15|  326|\n| 16|  258|\n| 17|  269|\n| 18|  255|\n| 19|  207|\n| 20|  312|\n| 21|  305|\n| 22|  288|\n+---+-----+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113799_893716541",
      "id": "20160718-214955_1574089020",
      "dateCreated": "2020-08-01 15:05:13.800",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nerrors_by_date \u003d [(row[0], row[1]) for row in errors_by_date_sorted_df.collect()]\nexpected \u003d [\n  (1, 243),\n  (3, 303),\n  (4, 346),\n  (5, 234),\n  (6, 372),\n  (7, 532),\n  (8, 381),\n  (9, 279),\n  (10, 314),\n  (11, 263),\n  (12, 195),\n  (13, 216),\n  (14, 287),\n  (15, 326),\n  (16, 258),\n  (17, 269),\n  (18, 255),\n  (19, 207),\n  (20, 312),\n  (21, 305),\n  (22, 288)\n]\n\nassert errors_by_date \u003d\u003d expected, \u0027incorrect errors_by_date_sorted_df\u0027\nassert errors_by_date_sorted_df.is_cached \u003d\u003d True, \u0027incorrect errors_by_date_sorted_df.is_cached\u0027\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.810",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113806_441148828",
      "id": "20160718-215047_1970799170",
      "dateCreated": "2020-08-01 15:05:13.806",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (5f) Exercise: Visualizing the 404 Errors by Day\n\nUsing the results from the previous exercise, use `matplotlib` to plot a line or bar graph of the 404 response codes by day.\n\n**Hint**: You\u0027ll need to use the same technique you used in (4f).",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.816",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(5f) Exercise: Visualizing the 404 Errors by Day\u003c/h3\u003e\n\u003cp\u003eUsing the results from the previous exercise, use \u003ccode\u003ematplotlib\u003c/code\u003e to plot a line or bar graph of the 404 response codes by day.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHint\u003c/strong\u003e: You\u0027ll need to use the same technique you used in (4f).\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113812_2126437272",
      "id": "20160723-182256_1591901297",
      "dateCreated": "2020-08-01 15:05:13.812",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ndays_with_errors_404 \u003d []\nerrors_404_by_day \u003d []\nfor day, count in errors_by_date_sorted_df.collect():\n  days_with_errors_404.append(day)\n  errors_404_by_day.append(count)\n\nprint days_with_errors_404\nprint errors_404_by_day\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.823",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n[243, 303, 346, 234, 372, 532, 381, 279, 314, 263, 195, 216, 287, 326, 258, 269, 255, 207, 312, 305, 288]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113818_-964505794",
      "id": "20160718-215131_1647614447",
      "dateCreated": "2020-08-01 15:05:13.818",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nassert days_with_errors_404 \u003d\u003d [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], \u0027incorrect days_with_errors_404\u0027\nassert errors_404_by_day \u003d\u003d [243, 303, 346, 234, 372, 532, 381, 279, 314, 263, 195, 216, 287, 326, 258, 269, 255, 207, 312, 305, 288], \u0027incorrect errors_404_by_day\u0027\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.829",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113825_677893439",
      "id": "20160718-215153_252344212",
      "dateCreated": "2020-08-01 15:05:13.826",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nerrors_by_date_sorted_df.show()",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.835",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+-----+\n|day|count|\n+---+-----+\n|  1|  243|\n|  3|  303|\n|  4|  346|\n|  5|  234|\n|  6|  372|\n|  7|  532|\n|  8|  381|\n|  9|  279|\n| 10|  314|\n| 11|  263|\n| 12|  195|\n| 13|  216|\n| 14|  287|\n| 15|  326|\n| 16|  258|\n| 17|  269|\n| 18|  255|\n| 19|  207|\n| 20|  312|\n| 21|  305|\n+---+-----+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113831_-193198552",
      "id": "20160718-215231_338454169",
      "dateCreated": "2020-08-01 15:05:13.831",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (5g) Exercise: Top Five Days for 404 Errors\n\nUsing the DataFrame `errors_by_date_sorted_df` you cached in the part (5e), what are the top five days for 404 errors and the corresponding counts of 404 errors?",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.842",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(5g) Exercise: Top Five Days for 404 Errors\u003c/h3\u003e\n\u003cp\u003eUsing the DataFrame \u003ccode\u003eerrors_by_date_sorted_df\u003c/code\u003e you cached in the part (5e), what are the top five days for 404 errors and the corresponding counts of 404 errors?\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113838_741405533",
      "id": "20160723-182518_1865837020",
      "dateCreated": "2020-08-01 15:05:13.838",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\ntop_err_date_df \u003d errors_by_date_sorted_df.sort(\u0027count\u0027, ascending\u003dFalse)\n\nprint \u0027Top Five Dates for 404 Requests:\\n\u0027\ntop_err_date_df.show(5)\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.848",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Top Five Dates for 404 Requests:\n\n+---+-----+\n|day|count|\n+---+-----+\n|  7|  532|\n|  8|  381|\n|  6|  372|\n|  4|  346|\n| 15|  326|\n+---+-----+\nonly showing top 5 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113844_549249790",
      "id": "20160718-215258_1747355705",
      "dateCreated": "2020-08-01 15:05:13.844",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nassert [(r[0], r[1]) for r in top_err_date_df.take(5)] \u003d\u003d [(7, 532), (8, 381), (6, 372), (4, 346), (15, 326)], \u0027incorrect top_err_date_df\u0027\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.854",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113850_138762382",
      "id": "20160718-215317_1076899705",
      "dateCreated": "2020-08-01 15:05:13.851",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (5h) Exercise: Hourly 404 Errors\n\nUsing the DataFrame `not_found_df` you cached in the part (5a) and sorting by hour of the day in increasing order, create a DataFrame containing the number of requests that had a 404 return code for each hour of the day (midnight starts at 0). Cache the resulting DataFrame `hour_records_sorted_df` and print that as a list.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.861",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(5h) Exercise: Hourly 404 Errors\u003c/h3\u003e\n\u003cp\u003eUsing the DataFrame \u003ccode\u003enot_found_df\u003c/code\u003e you cached in the part (5a) and sorting by hour of the day in increasing order, create a DataFrame containing the number of requests that had a 404 return code for each hour of the day (midnight starts at 0). Cache the resulting DataFrame \u003ccode\u003ehour_records_sorted_df\u003c/code\u003e and print that as a list.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113857_450384854",
      "id": "20160723-182558_1177349648",
      "dateCreated": "2020-08-01 15:05:13.857",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nfrom pyspark.sql.functions import hour\n\nhour_records_sorted_df \u003d not_found_df.select(hour(\u0027time\u0027).alias(\u0027hour\u0027)).groupBy(\u0027hour\u0027).count()\nhour_records_sorted_df.cache()\n\nprint \u0027Top hours for 404 requests:\\n\u0027\nhour_records_sorted_df.show(24)\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.867",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Top hours for 404 requests:\n\n+----+-----+\n|hour|count|\n+----+-----+\n|   0|  175|\n|   1|  171|\n|   2|  422|\n|   3|  272|\n|   4|  102|\n|   5|   95|\n|   6|   93|\n|   7|  122|\n|   8|  199|\n|   9|  185|\n|  10|  329|\n|  11|  263|\n|  12|  438|\n|  13|  397|\n|  14|  318|\n|  15|  347|\n|  16|  373|\n|  17|  330|\n|  18|  268|\n|  19|  269|\n|  20|  270|\n|  21|  241|\n|  22|  234|\n|  23|  272|\n+----+-----+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113863_1229227681",
      "id": "20160718-215357_990768188",
      "dateCreated": "2020-08-01 15:05:13.863",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nerrs_by_hour \u003d [(row[0], row[1]) for row in hour_records_sorted_df.collect()]\n\nexpected \u003d [\n  (0, 175),\n  (1, 171),\n  (2, 422),\n  (3, 272),\n  (4, 102),\n  (5, 95),\n  (6, 93),\n  (7, 122),\n  (8, 199),\n  (9, 185),\n  (10, 329),\n  (11, 263),\n  (12, 438),\n  (13, 397),\n  (14, 318),\n  (15, 347),\n  (16, 373),\n  (17, 330),\n  (18, 268),\n  (19, 269),\n  (20, 270),\n  (21, 241),\n  (22, 234),\n  (23, 272)\n]\n\nassert errs_by_hour \u003d\u003d expected, \u0027incorrect errs_by_hour\u0027\nassert hour_records_sorted_df.is_cached \u003d\u003d True, \u0027incorrect hour_records_sorted_df.is_cached\u0027\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.874",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113869_1673933709",
      "id": "20160718-215425_1194811262",
      "dateCreated": "2020-08-01 15:05:13.869",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### (5i) Exercise: Visualizing the 404 Response Codes by Hour\n\nUsing the results from the previous exercise, plot a line or bar graph of the 404 response codes by hour.",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.880",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ch3\u003e(5i) Exercise: Visualizing the 404 Response Codes by Hour\u003c/h3\u003e\n\u003cp\u003eUsing the results from the previous exercise, plot a line or bar graph of the 404 response codes by hour.\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113876_180078245",
      "id": "20160723-182645_1328282364",
      "dateCreated": "2020-08-01 15:05:13.876",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nhours_with_not_found \u003d hour_records_sorted_df.select(\u0027hour\u0027).map(lambda row: row[0]).collect()\nnot_found_counts_per_hour \u003d hour_records_sorted_df.select(\u0027count\u0027).map(lambda row: row[0]).collect()\n\nprint hours_with_not_found\nprint not_found_counts_per_hour\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.886",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n[175, 171, 422, 272, 102, 95, 93, 122, 199, 185, 329, 263, 438, 397, 318, 347, 373, 330, 268, 269, 270, 241, 234, 272]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113882_1143574936",
      "id": "20160718-215511_1439506524",
      "dateCreated": "2020-08-01 15:05:13.882",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nassert hours_with_not_found \u003d\u003d [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], \u0027incorrect hours_with_not_found\u0027\nassert not_found_counts_per_hour \u003d\u003d [175, 171, 422, 272, 102, 95, 93, 122, 199, 185, 329, 263, 438, 397, 318, 347, 373, 330, 268, 269, 270, 241, 234, 272], \u0027incorrect not_found_counts_per_hour\u0027\n",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.893",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113889_1197213406",
      "id": "20160718-215528_1196284276",
      "dateCreated": "2020-08-01 15:05:13.889",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nhour_records_sorted_df.show()",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.899",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----+-----+\n|hour|count|\n+----+-----+\n|   0|  175|\n|   1|  171|\n|   2|  422|\n|   3|  272|\n|   4|  102|\n|   5|   95|\n|   6|   93|\n|   7|  122|\n|   8|  199|\n|   9|  185|\n|  10|  329|\n|  11|  263|\n|  12|  438|\n|  13|  397|\n|  14|  318|\n|  15|  347|\n|  16|  373|\n|  17|  330|\n|  18|  268|\n|  19|  269|\n+----+-----+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113895_-888081964",
      "id": "20160718-215604_634878316",
      "dateCreated": "2020-08-01 15:05:13.895",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\n\nprint \u0027This was last run on: {0}\u0027.format(datetime.datetime.now())",
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.904",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "This was last run on: \n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596287113901_1582043438",
      "id": "20160718-215627_361302355",
      "dateCreated": "2020-08-01 15:05:13.901",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "user": "anonymous",
      "dateUpdated": "2020-08-01 15:05:13.911",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596287113906_-605227078",
      "id": "20160718-215658_906219167",
      "dateCreated": "2020-08-01 15:05:13.907",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "~Trash/Workshop: Analyzing Web Log Files",
  "id": "2FER8NJKC",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}