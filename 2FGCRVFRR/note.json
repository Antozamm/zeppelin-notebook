{
  "paragraphs": [
    {
      "text": "%md\nModificare iterativamente le colonne di un dataframe, oppure aggiungere iterativamente delle colonne ad un dataframe, o altre operazioni iterative su un dataframe, non è semplicissimo da realizzare.\n\nVediamo come fare usando la funzione `foldLeft`.\n\nInnanzitutto ci serve un dataframe, carichiamone uno a caso.",
      "user": "anonymous",
      "dateUpdated": "2020-07-30 22:37:31.468",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eModificare iterativamente le colonne di un dataframe, oppure aggiungere iterativamente delle colonne ad un dataframe, o altre operazioni iterative su un dataframe, non è semplicissimo da realizzare.\u003c/p\u003e\n\u003cp\u003eVediamo come fare usando la funzione \u003ccode\u003efoldLeft\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eInnanzitutto ci serve un dataframe, carichiamone uno a caso.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596139796343_385422820",
      "id": "20200730-220956_1234195594",
      "dateCreated": "2020-07-30 22:09:56.343",
      "dateStarted": "2020-07-30 22:37:31.472",
      "dateFinished": "2020-07-30 22:37:31.529",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.storage.StorageLevel\n\nval d_path \u003d \"D:/AnacondaProjects/Datasets/DatasetToCompleteTheSixSparkExercises\"\n\nval d_path_sales \u003d d_path + \"/sales_parquet\"\n\nval sales \u003d spark.read.format(\"parquet\").load(d_path_sales).persist(StorageLevel.MEMORY_AND_DISK)\n\nsales.show(1)",
      "user": "anonymous",
      "dateUpdated": "2020-07-30 22:37:51.063",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------+----------+---------+----------+---------------+--------------------+\n|order_id|product_id|seller_id|      date|num_pieces_sold|       bill_raw_text|\n+--------+----------+---------+----------+---------------+--------------------+\n|       1|         0|        0|2020-07-10|             26|kyeibuumwlyhuwksx...|\n+--------+----------+---------+----------+---------------+--------------------+\nonly showing top 1 row\n\r\nimport org.apache.spark.storage.StorageLevel\r\nd_path: String \u003d D:/AnacondaProjects/Datasets/DatasetToCompleteTheSixSparkExercises\r\nd_path_sales: String \u003d D:/AnacondaProjects/Datasets/DatasetToCompleteTheSixSparkExercises/sales_parquet\r\nsales: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [order_id: string, product_id: string ... 4 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1595585700084_-873554407",
      "id": "20200724-121500_1804778908",
      "dateCreated": "2020-07-24 12:15:00.084",
      "dateStarted": "2020-07-30 22:17:38.588",
      "dateFinished": "2020-07-30 22:20:24.812",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nNel codice sotto il `Range` agisce come una sorta di for loop.\n\nCosa fa il fold left? \nIniziamo con il semplificare il codice: `Range(1,5).foldLeft( sales1 ){ (acc,x) \u003d\u003e acc \u003d func(acc,x) }`\n\nVediamo gli step dell\u0027iterazione:\n\n* step 1:\n    - inizializa la variabile `acc` con `sales1`, e `x` e il valore corrente del range: 1 nel primo step\n    - applica alla coppia (acc,x) la funzione specificata, e l\u0027output della funzione è assegnato come nuovo valore di `acc` che verrà usato/propagato allo step 2\n    - il nuovo valore di `acc` è il vecchio `acc` con l\u0027aggiunta di una colonna\n* step 2:\n    - ho 2 nuovi valori acc e x. acc è stato aggiornato allo step precedente e x è il valore corrente del Range (\u003d2)\n    - alla nuova coppia (acc,x) viene applicata la funzione specificata e l\u0027aoutput della funzione viene assegnato ad `acc`, il cui nuovo valore verrà usato nello step 3\n\ne così via.\n\nIl risultato dell\u0027intero comando è il valore di `acc` generato all\u0027ultima iterazione. ",
      "user": "anonymous",
      "dateUpdated": "2020-07-30 22:20:53.058",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eNel codice sotto il \u003ccode\u003eRange\u003c/code\u003e agisce come una sorta di for loop.\u003c/p\u003e\n\u003cp\u003eCosa fa il fold left?\u003cbr/\u003eIniziamo con il semplificare il codice: \u003ccode\u003eRange(1,5).foldLeft( sales1 ){ (acc,x) \u003d\u0026gt; acc \u003d func(acc,x) }\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eVediamo gli step dell\u0026rsquo;iterazione:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003estep 1:\n    \u003cul\u003e\n      \u003cli\u003einizializa la variabile \u003ccode\u003eacc\u003c/code\u003e con \u003ccode\u003esales1\u003c/code\u003e, e \u003ccode\u003ex\u003c/code\u003e e il valore corrente del range: 1 nel primo step\u003c/li\u003e\n      \u003cli\u003eapplica alla coppia (acc,x) la funzione specificata, e l\u0026rsquo;output della funzione è assegnato come nuovo valore di \u003ccode\u003eacc\u003c/code\u003e che verrà usato/propagato allo step 2\u003c/li\u003e\n      \u003cli\u003eil nuovo valore di \u003ccode\u003eacc\u003c/code\u003e è il vecchio \u003ccode\u003eacc\u003c/code\u003e con l\u0026rsquo;aggiunta di una colonna\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003estep 2:\n    \u003cul\u003e\n      \u003cli\u003eho 2 nuovi valori acc e x. acc è stato aggiornato allo step precedente e x è il valore corrente del Range (\u003d2)\u003c/li\u003e\n      \u003cli\u003ealla nuova coppia (acc,x) viene applicata la funzione specificata e l\u0026rsquo;aoutput della funzione viene assegnato ad \u003ccode\u003eacc\u003c/code\u003e, il cui nuovo valore verrà usato nello step 3\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ee così via.\u003c/p\u003e\n\u003cp\u003eIl risultato dell\u0026rsquo;intero comando è il valore di \u003ccode\u003eacc\u003c/code\u003e generato all\u0026rsquo;ultima iterazione.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1595585800063_-1424944864",
      "id": "20200724-121640_795805087",
      "dateCreated": "2020-07-24 12:16:40.064",
      "dateStarted": "2020-07-30 22:20:53.069",
      "dateFinished": "2020-07-30 22:20:53.322",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val acc \u003d sc.collectionAccumulator(\"prova\")\n\nval sales1 \u003d sales.withColumnRenamed(\"bill_raw_text\", \"bill_raw_text_0\")\nsales1.show(5)\n\nval sales2 \u003d Range(1,5).foldLeft( sales1 ){ (acc, x) \u003d\u003e acc.withColumn(\"bill_raw_text_\"+x, md5( acc(\"bill_raw_text_\"+(x-1)) ) )}\nsales2.show(5)",
      "user": "anonymous",
      "dateUpdated": "2020-07-30 10:38:07.390",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------+----------+---------+----------+---------------+--------------------+\n|order_id|product_id|seller_id|      date|num_pieces_sold|     bill_raw_text_0|\n+--------+----------+---------+----------+---------------+--------------------+\n|       1|         0|        0|2020-07-10|             26|kyeibuumwlyhuwksx...|\n|       2|         0|        0|2020-07-08|             13|jfyuoyfkeyqkckwbu...|\n|       3|         0|        0|2020-07-05|             38|uyjihlzhzcswxcccx...|\n|       4|         0|        0|2020-07-05|             56|umnxvoqbdzpbwjqmz...|\n|       5|         0|        0|2020-07-05|             11|zmqexmaawmvdpqhih...|\n+--------+----------+---------+----------+---------------+--------------------+\nonly showing top 5 rows\n\r\n+--------+----------+---------+----------+---------------+--------------------+--------------------+--------------------+--------------------+--------------------+\n|order_id|product_id|seller_id|      date|num_pieces_sold|     bill_raw_text_0|     bill_raw_text_1|     bill_raw_text_2|     bill_raw_text_3|     bill_raw_text_4|\n+--------+----------+---------+----------+---------------+--------------------+--------------------+--------------------+--------------------+--------------------+\n|       1|         0|        0|2020-07-10|             26|kyeibuumwlyhuwksx...|0e72113eda28e817b...|dd7776a030df0941b...|51960891d3640178d...|aa26467f07244138a...|\n|       2|         0|        0|2020-07-08|             13|jfyuoyfkeyqkckwbu...|13af9a32eb8a31513...|4b4b6db3794449623...|1599682fcd0879b58...|afa71e43783564ce2...|\n|       3|         0|        0|2020-07-05|             38|uyjihlzhzcswxcccx...|c2d269a5c9376e431...|fee9bf121605c6666...|41719f6c251ec32a7...|7946fd68fde656983...|\n|       4|         0|        0|2020-07-05|             56|umnxvoqbdzpbwjqmz...|7a73a2250f416bb81...|fa00fab1238c5bf17...|82f89222fdc874bec...|260a666921f815980...|\n|       5|         0|        0|2020-07-05|             11|zmqexmaawmvdpqhih...|2e66bd8b5b16526e5...|4f2c00af4df594bb9...|dc2fe70005ee80ed9...|f165c5bfcbb6b4e85...|\n+--------+----------+---------+----------+---------------+--------------------+--------------------+--------------------+--------------------+--------------------+\nonly showing top 5 rows\n\r\nacc: org.apache.spark.util.CollectionAccumulator[Nothing] \u003d CollectionAccumulator(id: 189, name: Some(prova), value: [])\r\nsales1: org.apache.spark.sql.DataFrame \u003d [order_id: string, product_id: string ... 4 more fields]\r\nsales2: org.apache.spark.sql.DataFrame \u003d [order_id: string, product_id: string ... 8 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1595585730911_92420968",
      "id": "20200724-121530_829680300",
      "dateCreated": "2020-07-24 12:15:30.911",
      "dateStarted": "2020-07-30 10:38:07.459",
      "dateFinished": "2020-07-30 10:38:24.071",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nSi noti che l\u0027ultimo numero di `Range(1,5)` è 4",
      "user": "anonymous",
      "dateUpdated": "2020-07-24 12:31:37.376",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eSi noti che l\u0026rsquo;ultimo numero di \u003ccode\u003eRange(1,5)\u003c/code\u003e è 4\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1595586644773_1880936614",
      "id": "20200724-123044_1961446647",
      "dateCreated": "2020-07-24 12:30:44.774",
      "dateStarted": "2020-07-24 12:31:37.376",
      "dateFinished": "2020-07-24 12:31:37.380",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Altro esempio\nPer usare il foldLeft ho bisogno di un iterabile, nel caso sopra ho usato range, in questo esempio uso una lista di stringhe, per la precisione uso la lista dei nomi delle colonne.\n\nInizio dalla creazione di un dataframe a caso:",
      "user": "anonymous",
      "dateUpdated": "2020-07-30 22:21:24.183",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eAltro esempio\u003c/h2\u003e\n\u003cp\u003ePer usare il foldLeft ho bisogno di un iterabile, nel caso sopra ho usato range, in questo esempio uso una lista di stringhe, per la precisione uso la lista dei nomi delle colonne.\u003c/p\u003e\n\u003cp\u003eInizio dalla creazione di un dataframe a caso:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596098974183_-209076838",
      "id": "20200730-104934_2062627270",
      "dateCreated": "2020-07-30 10:49:34.184",
      "dateStarted": "2020-07-30 22:21:24.202",
      "dateFinished": "2020-07-30 22:21:24.296",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val df \u003d spark.sparkContext.parallelize(List((1,4,5,7,9,240),(2,5,8,34,5,350))).toDF\ndf.show",
      "user": "anonymous",
      "dateUpdated": "2020-07-30 22:31:50.467",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+---+---+---+---+---+\n| _1| _2| _3| _4| _5| _6|\n+---+---+---+---+---+---+\n|  1|  4|  5|  7|  9|240|\n|  2|  5|  8| 34|  5|350|\n+---+---+---+---+---+---+\n\r\ndf: org.apache.spark.sql.DataFrame \u003d [_1: int, _2: int ... 4 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596099081333_582994210",
      "id": "20200730-105121_1683421105",
      "dateCreated": "2020-07-30 10:51:21.333",
      "dateStarted": "2020-07-30 22:31:50.578",
      "dateFinished": "2020-07-30 22:32:10.224",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nCome si vede sopra la lista dei nomi delle colonne non è molto intuitiva, quindi decido di cambiarla. \n\nInizio con il fare un mapping dal vecchio nome al nuovo.",
      "user": "anonymous",
      "dateUpdated": "2020-07-30 22:21:29.730",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eCome si vede sopra la lista dei nomi delle colonne non è molto intuitiva, quindi decido di cambiarla. \u003c/p\u003e\n\u003cp\u003eInizio con il fare un mapping dal vecchio nome al nuovo.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596099407511_-1122694846",
      "id": "20200730-105647_1162738070",
      "dateCreated": "2020-07-30 10:56:47.511",
      "dateStarted": "2020-07-30 22:21:29.744",
      "dateFinished": "2020-07-30 22:21:29.801",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val col_mapping \u003d Map(\"_1\" -\u003e \"user_ID\",\n                      \"_2\" -\u003e \"numero_ordini_2016\",\n                      \"_3\" -\u003e \"numero_ordini_2017\",\n                      \"_4\" -\u003e \"numero_ordini_2018\",\n                      \"_5\" -\u003e \"numero_ordini_2019\",\n                      \"_6\" -\u003e \"totale_ordini_Euro\")",
      "user": "anonymous",
      "dateUpdated": "2020-07-30 11:11:14.901",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "col_mapping: scala.collection.immutable.Map[String,String] \u003d Map(_3 -\u003e numero_ordini_2017, _2 -\u003e numero_ordini_2016, _6 -\u003e totale_ordini_Euro, _1 -\u003e user_ID, _4 -\u003e numero_ordini_2018, _5 -\u003e numero_ordini_2019)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596099923786_1016965549",
      "id": "20200730-110523_706976046",
      "dateCreated": "2020-07-30 11:05:23.786",
      "dateStarted": "2020-07-30 11:11:15.001",
      "dateFinished": "2020-07-30 11:11:18.885",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nCome nel caso precedente, inizializzo l\u0027accumulatore con df.\n\nAd ogni step rinomina la colonna corrente (x) di df.columns, cambiando il nome in col_mapping(x).\n",
      "user": "anonymous",
      "dateUpdated": "2020-07-30 22:26:10.218",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eCome nel caso precedente, inizializzo l\u0026rsquo;accumulatore con df.\u003c/p\u003e\n\u003cp\u003eAd ogni step rinomina la colonna corrente (x) di df.columns, cambiando il nome in col_mapping(x).\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596102937334_-1302434381",
      "id": "20200730-115537_1223526398",
      "dateCreated": "2020-07-30 11:55:37.334",
      "dateStarted": "2020-07-30 22:26:10.228",
      "dateFinished": "2020-07-30 22:26:10.266",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val df2 \u003d df.columns.foldLeft(df){ (acc,x) \u003d\u003e acc.withColumnRenamed(x, col_mapping(x))}\ndf2.show",
      "user": "anonymous",
      "dateUpdated": "2020-07-30 11:56:23.189",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+------------------+------------------+------------------+------------------+------------------+\n|user_ID|numero_ordini_2016|numero_ordini_2017|numero_ordini_2018|numero_ordini_2019|totale_ordini_Euro|\n+-------+------------------+------------------+------------------+------------------+------------------+\n|      1|                 4|                 5|                 7|                 9|               240|\n|      2|                 5|                 8|                34|                 5|               350|\n+-------+------------------+------------------+------------------+------------------+------------------+\n\r\ndf2: org.apache.spark.sql.DataFrame \u003d [user_ID: int, numero_ordini_2016: int ... 4 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596100109438_-876721961",
      "id": "20200730-110829_1451289329",
      "dateCreated": "2020-07-30 11:08:29.439",
      "dateStarted": "2020-07-30 11:56:23.325",
      "dateFinished": "2020-07-30 11:56:27.130",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n**Bang!**\n\nEcco il dataframe con tutte i nome delle colonne modificate.\n\nSe voglio modificare solo alcuni nomi di colonne posso definire un Map e poi usare il foldLeft sulle keys del Map... vediamo come.\n\nIl punto di partenza è sempre un iterabile.",
      "user": "anonymous",
      "dateUpdated": "2020-07-30 22:38:33.825",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003cstrong\u003eBang!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eEcco il dataframe con tutte i nome delle colonne modificate.\u003c/p\u003e\n\u003cp\u003eSe voglio modificare solo alcuni nomi di colonne posso definire un Map e poi usare il foldLeft sulle keys del Map\u0026hellip; vediamo come.\u003c/p\u003e\n\u003cp\u003eIl punto di partenza è sempre un iterabile.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596140808958_-1617466366",
      "id": "20200730-222648_1167520314",
      "dateCreated": "2020-07-30 22:26:48.959",
      "dateStarted": "2020-07-30 22:38:33.859",
      "dateFinished": "2020-07-30 22:38:34.064",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "//voglio modificare solo i nomi di queste due colonne\nval col_mapping \u003d Map(\"_1\" -\u003e \"user_ID\",\n                      \"_6\" -\u003e \"totale_ordini_Euro\")\n    \nval acc \u003d sc.collectionAccumulator(\"dataFrameAcc\")\n                  \nval df2 \u003d col_mapping.keys.foldLeft(df){ (acc,x) \u003d\u003e acc.withColumnRenamed(x, col_mapping(x))}\n\ndf2.show",
      "user": "anonymous",
      "dateUpdated": "2020-07-30 22:33:03.244",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------+---+---+---+---+------------------+\n|user_ID| _2| _3| _4| _5|totale_ordini_Euro|\n+-------+---+---+---+---+------------------+\n|      1|  4|  5|  7|  9|               240|\n|      2|  5|  8| 34|  5|               350|\n+-------+---+---+---+---+------------------+\n\r\ncol_mapping: scala.collection.immutable.Map[String,String] \u003d Map(_1 -\u003e user_ID, _6 -\u003e totale_ordini_Euro)\r\nacc: org.apache.spark.util.CollectionAccumulator[Nothing] \u003d CollectionAccumulator(id: 110, name: Some(dataFrameAcc), value: [])\r\ndf2: org.apache.spark.sql.DataFrame \u003d [user_ID: int, _2: int ... 4 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596102732050_966723985",
      "id": "20200730-115212_555876976",
      "dateCreated": "2020-07-30 11:52:12.051",
      "dateStarted": "2020-07-30 22:33:03.334",
      "dateFinished": "2020-07-30 22:33:11.319",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\ne **ri-Bang!**",
      "user": "anonymous",
      "dateUpdated": "2020-07-30 22:34:01.852",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003ee \u003cstrong\u003eri-Bang!\u003c/strong\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596141157330_-299651595",
      "id": "20200730-223237_576408790",
      "dateCreated": "2020-07-30 22:32:37.330",
      "dateStarted": "2020-07-30 22:34:01.856",
      "dateFinished": "2020-07-30 22:34:01.904",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "2020-07-30 22:33:44.614",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1596141211538_2134555436",
      "id": "20200730-223331_522628179",
      "dateCreated": "2020-07-30 22:33:31.538",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Modificare iterativamente le colonne di un dataframe",
  "id": "2FGCRVFRR",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}